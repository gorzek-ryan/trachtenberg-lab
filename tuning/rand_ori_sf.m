
%% Preprocessing

clearvars; close all;
file_path = "/Users/ryan.gorzek/Library/CloudStorage/GoogleDrive-ryan.gorzek@gmail.com/Shared drives/Astrocytes - Protocadherins/";
addpath(genpath(fullfile(file_path)));

subj_ids = ["john01", "john02", "john03"];
genotypes = ["KO", "KO", "Het"];
plane_ids = ["000", "001", "002"];
eye_ids = ["000", "001"];
eye_names = ["contra", "ipsi"];
% Preallocate table for storing cell stats across subjects and planes.
cells_tbl = [];
for subj = subj_ids
    for plane = plane_ids
        exp_id = char(strcat(subj, "_", plane));
        fprintf("Processing %s...\n", exp_id);
        exp_path = char(strcat(file_path, filesep, subj, filesep, exp_id, filesep));
        plane_path = strcat(exp_path, "suite2p", filesep, "plane0", filesep);
        % Generate .align, .segment, and .signals1 files. 
        sbxsuite2sbx(strcat(plane_path, "Fall"), strcat(exp_path, exp_id));
        % Generate .signals file.
        sbxf2spks(strcat(exp_path, exp_id));
        % Split .signals file for the two eyes.
        sbxsplitsuite(strcat(exp_path, exp_id));
        % Process contra and ipsi eyes.
        eye_tbls = cell(1,2);
        for eyeball = eye_ids
            % Calculate tuning results and generate .orisf file for each eye.
            eye_id = char(strcat(exp_path, exp_id, "_", eyeball, "_suite"));
            sbxorisf_new(eye_id);
            % Load .orisf file and create table from structure array.
            stat_struct = load(strcat(eye_id, ".orisf"), "-mat", "stat").stat;
            eye_idx = eye_ids == eyeball;
            eye_tbls{eye_idx} = struct2table(stat_struct);
            % Add eye labels to stat table variable names.
            eye_tbls{eye_idx}.Properties.VariableNames = ...
                strcat(eye_tbls{eye_idx}.Properties.VariableNames, "_", eye_names{eye_idx});
        end
        % Add table variable for subject and plane IDs.
        plane_tbl = [eye_tbls{1}, eye_tbls{2}];
        num_cells = size(plane_tbl, 1);
        plane_id = repmat(plane, [num_cells, 1]);
        plane_tbl = addvars(plane_tbl, plane_id, 'Before', "k_contra");
        genotype = repmat(genotypes(subj_ids == subj), [num_cells, 1]);
        plane_tbl = addvars(plane_tbl, genotype, 'Before', "plane_id");
        subject_id = repmat(subj, [num_cells, 1]);
        plane_tbl = addvars(plane_tbl, subject_id, 'Before', "genotype");
        % Add current data to cumulative table.
        cells_tbl = vertcat(cells_tbl, plane_tbl);
    end
end

% Save table containing data for all subjects and planes.
save(strcat(file_path, "randorisf_cells_tbl.mat"), "cells_tbl");

%% Plotting

clearvars; close all;
file_path = "/Users/ryan.gorzek/Library/CloudStorage/GoogleDrive-ryan.gorzek@gmail.com/Shared drives/Astrocytes - Protocadherins/";
cells_tbl = load(strcat(file_path, "randorisf_cells_tbl.mat")).cells_tbl;

subj_ids = ["john01"]; % , "john02", "john03"
genotypes = ["KO", "KO", "Het"];
plane_ids = ["000"]; % , "001", "002"
for subj = subj_ids
    % Plot tuning kernels for each eye from all planes in each animal.
    subj_idx = cells_tbl.subject_id == subj;
    subj_tbl = cells_tbl(subj_idx, :);
    title = sprintf("%s (%s) %i cells", subj, genotypes(subj_ids == subj), size(subj_tbl, 1));
    save_path = strcat(file_path, "plots", filesep, subj, "_all_kernels.jpeg");
%     kernPlot(subj_tbl, num_rows=15, title=title, save_path=save_path);
    % Plot tuning statistics for each eye from all planes in each animal.
    rf_pie = statsPlot(subj_tbl, title=title, save_path=save_path);
    for plane = plane_ids
        % Plot tuning kernels for each eye from each plane.
        plane_idx = subj_idx & cells_tbl.plane_id == plane;
        plane_tbl = cells_tbl(plane_idx, :);
        title = sprintf("%s_%s (%s) %i cells", subj, plane, genotypes(subj_ids == subj), size(plane_tbl, 1));
        save_path = strcat(file_path, "plots", filesep, subj, "_", plane, "_kernels.jpeg");
%         kernPlot(plane_tbl, title=title, save_path=save_path);
        % Plot tuning statistics for each eye from each plane.

    end
end

% Define plotting functions.

function kernPlot(cells_table, NVAs)
% KERNPLOT Plot orisf tuning kernels from a table of sbxorisf_new data.
arguments
    cells_table
    NVAs.num_rows (1,1) double = 10
    NVAs.num_cols (1,1) double = NaN
    NVAs.title string = ""
    NVAs.save_path string = ""
end

num_cells = size(cells_table, 1);
if isnan(NVAs.num_cols)
    NVAs.num_cols = ceil(num_cells/NVAs.num_rows);
end
% Create a 5x10 tile area for each cell, spacing columns by 1 tile.
f = figure; hold on; set(gcf, "Color","w");
t = tiledlayout(NVAs.num_rows*5, ...
                NVAs.num_cols*10, ...
                "TileSpacing","tight", ...
                "Padding","compact");
for cell_num = 1:num_cells
    % Concatenate ipsi and contra side-by-side, separated by a NaN column.
    kern_contra = cells_table{cell_num, "kern_contra"}{:};
    kern_ipsi = cells_table{cell_num, "kern_ipsi"}{:};
    kerns = horzcat(kern_ipsi, nan(size(kern_contra,1), 1), kern_contra);
    % Plot.
    nexttile([5,10]);
    imagesc(kerns, "AlphaData",~isnan(kerns));
    axis tight; axis off; pbaspect([2.04,1,1]);
    if NVAs.num_rows == 10 && ...
       cell_num <= NVAs.num_cols
        title("  I              C ");
    elseif cell_num <= NVAs.num_cols
        title(" I       C");
    end
end
% Dynamically resize the figure such that the kernel plots appear similar
% across animals/planes.
if NVAs.num_rows == 10
    f.Position = [-231, 1130, 125*NVAs.num_cols, 70*NVAs.num_rows];
else
    f.Position = [-231, 1130, 78*NVAs.num_cols, 50*NVAs.num_rows];
end
% Set title and axis labels.
title(t, NVAs.title, ...
         "Interpreter", "none", ...
         "FontWeight", "bold", ...
         "FontSize", 15);
annotation("textbox", ...
           "String","Orientation", ...
           "FontWeight","bold", ...
           "FontSize",15, ...
           "EdgeColor","none", ...
           "HorizontalAlignment","center", ...
           "VerticalAlignment","middle", ...
           "Rotation",90, ...
           "Position",[0.02, 0.5, 0, 0]);
annotation("textbox", ...
           "String","Spatial Frequency", ...
           "FontWeight","bold", ...
           "FontSize",15, ...
           "EdgeColor","none", ...
           "HorizontalAlignment","center", ...
           "VerticalAlignment","middle", ...
           "Rotation",0, ...
           "Position",[0.4, 0.025, 0.2, 0]);
% Set one y-axis and one x-axis per plot for reference.

% Save the figure to file.
imwrite(getframe(f).cdata, ...
        NVAs.save_path, ...
        "jpeg", ...
        "Mode", "lossless", ...
        "Quality", 100);

end


function rf_pie = statsPlot(cells_table, NVAs)
% STATSPLOT Plot orisf tuning statistics from a table of sbxorisf_new data.
arguments
    cells_table
    NVAs.contra_color (1,3) double = [0.2, 0.2, 0.9]
    NVAs.ipsi_color (1,3) double = [0.9, 0.2, 0.2]
    NVAs.bino_color (1,3) double = [0.6, 0.3, 0.6]
    NVAs.title string = ""
    NVAs.save_path string = ""
end

num_cells = size(cells_table, 1);
f = figure; hold on;
set(gcf, "Color","w");
t = tiledlayout(18, ...
                9, ...
                "TileSpacing","loose", ...
                "Padding","compact");

% Plot t_max histogram for contra and ipsi.
nexttile([3,3]); hold on; pbaspect([1,1,1]);
tmax_contra = cells_table{:, "tmax_contra"};
tmax_ipsi = cells_table{:, "tmax_ipsi"};
hist_contra = histogram(tmax_contra, ...
                        "Normalization", "probability", ...
                        "FaceColor",      NVAs.contra_color, ...
                        "FaceAlpha",      0.7, ...
                        "EdgeColor",     "w", ...
                        "EdgeAlpha",      0.7);
histogram(tmax_ipsi, ...
          "BinEdges",       hist_contra.BinEdges, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.ipsi_color, ...
          "FaceAlpha",      0.7, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      0.7);
setStyle(title = "t_max", ...
         ylabel = "Probability", ...
         interpreter = "none", ...
         fontSize = 11, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Plot SNR histogram for contra and ipsi.
nexttile([3,3]); hold on; pbaspect([1,1,1]);
snr_contra = cells_table{:, "snr_contra"};
snr_ipsi = cells_table{:, "snr_ipsi"};
hist_contra = histogram(snr_contra, ...
                        "Normalization", "probability", ...
                        "FaceColor",      NVAs.contra_color, ...
                        "FaceAlpha",      0.7, ...
                        "EdgeColor",     "w", ...
                        "EdgeAlpha",      0.7);
histogram(snr_ipsi, ...
          "BinEdges",       hist_contra.BinEdges, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.ipsi_color, ...
          "FaceAlpha",      0.7, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      0.7);
setStyle(title = "SNR", ...
         interpreter = "none", ...
         fontSize = 11, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Plot spikes_max histogram for contra and ipsi.
nexttile([3,3]); hold on; pbaspect([1,1,1]);
smax_contra = cellfun(@(x) max(x, [], "all"), cells_table{:, "kern_contra"});
smax_ipsi = cellfun(@(x) max(x, [], "all"), cells_table{:, "kern_ipsi"});
hist_contra = histogram(smax_contra, ...
                        "Normalization", "probability", ...
                        "FaceColor",      NVAs.contra_color, ...
                        "FaceAlpha",      0.7, ...
                        "EdgeColor",     "w", ...
                        "EdgeAlpha",      0.7);
histogram(smax_ipsi, ...
          "BinEdges",       hist_contra.BinEdges, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.ipsi_color, ...
          "FaceAlpha",      0.7, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      0.7);
setStyle(title = "spikes_max", ...
         interpreter = "none", ...
         fontSize = 11, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Scatter t_max against SNR.
nexttile([3,1]); axis off; pbaspect([1,3,1]);
nexttile([3,3]); hold on; pbaspect([1,1,1]);
scatter(tmax_contra, snr_contra, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.contra_color, ...
        "MarkerEdgeColor", NVAs.contra_color, ...
        "MarkerFaceAlpha", 0.7, ...
        "MarkerEdgeAlpha", 0.7);
scatter(tmax_ipsi, snr_ipsi, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.ipsi_color, ...
        "MarkerEdgeColor", NVAs.ipsi_color, ...
        "MarkerFaceAlpha", 0.7, ...
        "MarkerEdgeAlpha", 0.7);
setStyle(ylabel = "SNR", ...
         xlabel = "t_max", ...
         interpreter = "none", ...
         fontSize = 11);

% Scatter spikes_max against SNR.
nexttile([3,1]); axis off; pbaspect([1,3,1]);
nexttile([3,3]); hold on; pbaspect([1,1,1]);
scatter(smax_contra, snr_contra, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.contra_color, ...
        "MarkerEdgeColor", NVAs.contra_color, ...
        "MarkerFaceAlpha", 0.7, ...
        "MarkerEdgeAlpha", 0.7);
scatter(smax_ipsi, snr_ipsi, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.ipsi_color, ...
        "MarkerEdgeColor", NVAs.ipsi_color, ...
        "MarkerFaceAlpha", 0.7, ...
        "MarkerEdgeAlpha", 0.7);
setStyle(ylabel = "SNR", ...
         xlabel = "spikes_max", ...
         interpreter = "none", ...
         fontSize = 11);
nexttile([3,1]); axis off; pbaspect([1,3,1]);

% Find SNR threshold from pooled contra & ipsi.
tmax_pool = vertcat(tmax_contra, tmax_ipsi);
tmax_idx = tmax_pool >= 5 & tmax_pool <= 11;
snr_pool = vertcat(snr_contra, snr_ipsi);
snr_mean = mean(snr_pool(~tmax_idx), "omitnan");
snr_std = std(snr_pool(~tmax_idx), "omitnan");
snr_thr = snr_mean + 3*snr_std;

% Draw pie chart showing fraction un-, contra-, ipsi-, and both-responsive.
resp_frac = flip([nnz(snr_contra <= snr_thr & snr_ipsi <= snr_thr)/num_cells, ...
                  nnz(snr_contra > snr_thr & snr_ipsi <= snr_thr)/num_cells, ...
                  nnz(snr_contra <= snr_thr & snr_ipsi > snr_thr)/num_cells, ...
                  nnz(snr_contra > snr_thr & snr_ipsi > snr_thr)/num_cells]);
nexttile([3,1]); axis off; pbaspect([1,3,1]);
nexttile([3,3]); hold on; pbaspect([1,1,1]);
slice_colors = {[0.6, 0.6, 0.6], NVAs.contra_color, NVAs.ipsi_color, NVAs.bino_color};
slice_names = ["Unresponsive", "Contra", "Ipsi", "Both"];
rf_pie = pie(resp_frac, slice_names);
axis off; title("  ");
for pie_slice = 1:2:7
    rf_pie(pie_slice).FaceColor = slice_colors{1:2:7 == pie_slice};
    rf_pie(pie_slice).EdgeColor = "w";
    vertices = rf_pie(pie_slice).Vertices;
    [cent_x, cent_y] = centroid(polyshape({vertices(:,1)}, {vertices(:,2)}));
    text(cent_x, cent_y, ...
         sprintf("%.0f%%", resp_frac(1:2:7 == pie_slice)*100), ...
                 "FontWeight","bold", ...
                 "FontSize",12, ...
                 "Color","w", ...
                 "HorizontalAlignment","center", ...
                 "VerticalAlignment","middle");
    rf_pie(pie_slice + 1).FontSize = 12;
    rf_pie(pie_slice + 1).FontWeight = "bold";
end

% Plot matching coefficient histogram.
bino_idx = snr_contra > snr_thr & snr_ipsi > snr_thr;
kern_contra_bino = cells_table{bino_idx, "kern_contra"};
kern_ipsi_bino = cells_table{bino_idx, "kern_ipsi"};
kern_contra_bino = cell2mat(cellfun(@(x) reshape(x, 1, []), kern_contra_bino, "UniformOutput",false))';
kern_ipsi_bino = cell2mat(cellfun(@(x) reshape(x, 1, []), kern_ipsi_bino, "UniformOutput",false))';
matching_coeffs = diag(corr(kern_contra_bino, kern_ipsi_bino));
nexttile([3,5]); hold on; pbaspect([5,3,1]);
histogram(matching_coeffs, ...
          "BinEdges", -1:0.2:1, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.bino_color, ...
          "FaceAlpha",      1, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      1);
xline(median(matching_coeffs), "--k", "LineWidth",1.5);
setStyle(title = "Matching Coefficient", ...
         ylabel = "Probability", ...
         interpreter = "none", ...
         fontSize = 11, ...
         xlim = [-1, 1], ...
         xticks = -1:0.2:1, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Plot boxes of spatial frequency tuning for mono-contra, mono-ipsi,
% bino-contra, and bino-ipsi.
contra_idx = snr_contra > snr_thr & snr_ipsi <= snr_thr;
ipsi_idx = snr_contra <= snr_thr & snr_ipsi > snr_thr;

% Plot boxes of orientation tuning for mono-contra, mono-ipsi,
% bino-contra, and bino-ipsi.


% Plot boxes of response linearity for mono-contra, mono-ipsi,
% bino-contra, and bino-ipsi.


f.Position = [1278, 901, 679, 1336]; % [1076, 901, 510, 976];
title(t, NVAs.title, ...
         "Interpreter", "none", ...
         "FontWeight", "bold", ...
         "FontSize", 15);

end













