
%% Preprocessing

clearvars; close all;
file_path = "/Users/ryan.gorzek/Library/CloudStorage/GoogleDrive-ryan.gorzek@gmail.com/Shared drives/Astrocytes - Protocadherins/";
addpath(genpath(fullfile(file_path)));

subj_ids = ["john01", "john02", "john03"];
genotypes = ["KO", "KO", "Het"];
plane_ids = ["000", "001", "002"];
eye_ids = ["000", "001"];
eye_names = ["contra", "ipsi"];
% Preallocate table for storing cell stats across subjects and planes.
cells_tbl = [];
for subj = subj_ids
    for plane = plane_ids
        exp_id = char(strcat(subj, "_", plane));
        fprintf("Processing %s...\n", exp_id);
        exp_path = char(strcat(file_path, filesep, subj, filesep, exp_id, filesep));
        plane_path = strcat(exp_path, "suite2p", filesep, "plane0", filesep);
        % Generate .align, .segment, and .signals1 files. 
        sbxsuite2sbx(strcat(plane_path, "Fall"), strcat(exp_path, exp_id));
        % Generate .signals file.
        sbxf2spks(strcat(exp_path, exp_id));
        % Split .signals file for the two eyes.
        sbxsplitsuite(strcat(exp_path, exp_id));
        % Process contra and ipsi eyes.
        eye_tbls = cell(1,2);
        for eyeball = eye_ids
            % Calculate tuning results and generate .orisf file for each eye.
            eye_id = char(strcat(exp_path, exp_id, "_", eyeball, "_suite"));
            sbxorisf_new(eye_id);
            % Load .orisf file and create table from structure array.
            stat_struct = load(strcat(eye_id, ".orisf"), "-mat", "stat").stat;
            eye_idx = eye_ids == eyeball;
            eye_tbls{eye_idx} = struct2table(stat_struct);
            % Add eye labels to stat table variable names.
            eye_tbls{eye_idx}.Properties.VariableNames = ...
                strcat(eye_tbls{eye_idx}.Properties.VariableNames, "_", eye_names{eye_idx});
        end
        % Add table variable for subject and plane IDs.
        plane_tbl = [eye_tbls{1}, eye_tbls{2}];
        num_cells = size(plane_tbl, 1);
        plane_id = repmat(plane, [num_cells, 1]);
        plane_tbl = addvars(plane_tbl, plane_id, 'Before', "k_contra");
        genotype = repmat(genotypes(subj_ids == subj), [num_cells, 1]);
        plane_tbl = addvars(plane_tbl, genotype, 'Before', "plane_id");
        subject_id = repmat(subj, [num_cells, 1]);
        plane_tbl = addvars(plane_tbl, subject_id, 'Before', "genotype");
        % Add current data to cumulative table.
        cells_tbl = vertcat(cells_tbl, plane_tbl);
    end
end

% Save table containing data for all subjects and planes.
save(strcat(file_path, "randorisf_cells_tbl.mat"), "cells_tbl");

%% Plotting

clearvars; close all;
file_path = "/Users/ryan.gorzek/Library/CloudStorage/GoogleDrive-ryan.gorzek@gmail.com/Shared drives/Astrocytes - Protocadherins/";
addpath(genpath(fullfile(file_path)));
cells_tbl = load(strcat(file_path, "randorisf_cells_tbl.mat")).cells_tbl;

subj_ids = ["john01"]; % , "john02", "john03"
genotypes = ["KO", "KO", "Het"];
plane_ids = ["000"]; % , "001", "002"
for subj = subj_ids
    % Plot tuning kernels for each eye from all planes in each animal.
    subj_idx = cells_tbl.subject_id == subj;
    subj_tbl = cells_tbl(subj_idx, :);
    title = sprintf("%s (%s) %i cells", subj, genotypes(subj_ids == subj), size(subj_tbl, 1));
%     save_path = strcat(file_path, "plots", filesep, subj, "_all_kernels.jpeg");
%     kernPlot(subj_tbl, num_rows=15, title=title, save_path=save_path);
    % Plot tuning statistics for each eye from all planes in each animal.
    save_path = strcat(file_path, "plots", filesep, subj, "_all_stats.jpeg");
    statsPlot(subj_tbl, title=title, save_path=save_path);
    for plane = plane_ids
        % Plot tuning kernels for each eye from each plane.
        plane_idx = subj_idx & cells_tbl.plane_id == plane;
        plane_tbl = cells_tbl(plane_idx, :);
        title = sprintf("%s_%s (%s) %i cells", subj, plane, genotypes(subj_ids == subj), size(plane_tbl, 1));
%         save_path = strcat(file_path, "plots", filesep, subj, "_", plane, "_kernels.jpeg");
%         kernPlot(plane_tbl, title=title, save_path=save_path);
        % Plot tuning statistics for each eye from each plane.

    end
end

% Define plotting functions.

function kernPlot(cells_table, NVAs)
% KERNPLOT Plot orisf tuning kernels from a table of sbxorisf_new data.
arguments
    cells_table
    NVAs.num_rows (1,1) double = 10
    NVAs.num_cols (1,1) double = NaN
    NVAs.title string = ""
    NVAs.save_path string = ""
end

num_cells = size(cells_table, 1);
if isnan(NVAs.num_cols)
    NVAs.num_cols = ceil(num_cells/NVAs.num_rows);
end
% Create a 5x10 tile area for each cell, spacing columns by 1 tile.
f = figure; hold on; set(gcf, "Color","w");
t = tiledlayout(NVAs.num_rows*5, ...
                NVAs.num_cols*10, ...
                "TileSpacing","tight", ...
                "Padding","compact");
for cell_num = 1:num_cells
    % Concatenate ipsi and contra side-by-side, separated by a NaN column.
    kern_contra = cells_table{cell_num, "kern_contra"}{:};
    kern_ipsi = cells_table{cell_num, "kern_ipsi"}{:};
    kerns = horzcat(kern_ipsi, nan(size(kern_contra,1), 1), kern_contra);
    % Plot.
    nexttile([5,10]);
    imagesc(kerns, "AlphaData",~isnan(kerns));
    axis tight; axis off; pbaspect([2.04,1,1]);
    if NVAs.num_rows == 10 && ...
       cell_num <= NVAs.num_cols
        title("  I              C ");
    elseif cell_num <= NVAs.num_cols
        title(" I       C");
    end
end
% Dynamically resize the figure such that the kernel plots appear similar
% across animals/planes.
if NVAs.num_rows == 10
    f.Position = [-231, 1130, 125*NVAs.num_cols, 70*NVAs.num_rows];
else
    f.Position = [-231, 1130, 78*NVAs.num_cols, 50*NVAs.num_rows];
end
% Set title and axis labels.
title(t, NVAs.title, ...
         "Interpreter", "none", ...
         "FontWeight", "bold", ...
         "FontSize", 15);
annotation("textbox", ...
           "String","Orientation", ...
           "FontWeight","bold", ...
           "FontSize",15, ...
           "EdgeColor","none", ...
           "HorizontalAlignment","center", ...
           "VerticalAlignment","middle", ...
           "Rotation",90, ...
           "Position",[0.02, 0.5, 0, 0]);
annotation("textbox", ...
           "String","Spatial Frequency", ...
           "FontWeight","bold", ...
           "FontSize",15, ...
           "EdgeColor","none", ...
           "HorizontalAlignment","center", ...
           "VerticalAlignment","middle", ...
           "Rotation",0, ...
           "Position",[0.4, 0.025, 0.2, 0]);
% Set one y-axis and one x-axis per plot for reference.

% Save the figure to file.
imwrite(getframe(f).cdata, ...
        NVAs.save_path, ...
        "jpeg", ...
        "Mode", "lossless", ...
        "Quality", 100);

end


function statsPlot(cells_table, NVAs)
% STATSPLOT Plot orisf tuning statistics from a table of sbxorisf_new data.
arguments
    cells_table
    NVAs.contra_color (1,3) double = [0.2, 0.2, 0.9]
    NVAs.ipsi_color (1,3) double = [0.9, 0.2, 0.2]
    NVAs.bino_color (1,3) double = [0.6, 0.3, 0.6]
    NVAs.title string = ""
    NVAs.save_path string = ""
end

num_cells = size(cells_table, 1);
f = figure; hold on;
set(gcf, "Color","w");
t = tiledlayout(20, ...
                44, ...
                "TileSpacing","loose", ...
                "Padding","compact");
tile_idx = reshape(1:(20*44), 44, 20)';

% Plot t_max histogram for contra and ipsi.
nexttile(tile_idx(2,1), [6,6]); hold on; pbaspect([1,1,1]);
tmax_contra = cells_table{:, "tmax_contra"};
tmax_ipsi = cells_table{:, "tmax_ipsi"};
hist_contra = histogram(tmax_contra, ...
                        "Normalization", "probability", ...
                        "FaceColor",      NVAs.contra_color, ...
                        "FaceAlpha",      0.7, ...
                        "EdgeColor",     "w", ...
                        "EdgeAlpha",      0.7);
histogram(tmax_ipsi, ...
          "BinEdges",       hist_contra.BinEdges, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.ipsi_color, ...
          "FaceAlpha",      0.5, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      0.5);
setStyle(title = "t_max", ...
         ylabel = "Probability", ...
         interpreter = "none", ...
         fontSize = 11, ...
         xlim = [-0.2, 20.2], ...
         xticks = 0:5:20, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Plot SNR histogram for contra and ipsi.
nexttile(tile_idx(8,1), [6,6]); hold on; pbaspect([1,1,1]);
snr_contra = cells_table{:, "snr_contra"};
snr_ipsi = cells_table{:, "snr_ipsi"};
hist_contra = histogram(snr_contra, ...
                        "Normalization", "probability", ...
                        "FaceColor",      NVAs.contra_color, ...
                        "FaceAlpha",      0.7, ...
                        "EdgeColor",     "w", ...
                        "EdgeAlpha",      0.7);
histogram(snr_ipsi, ...
          "BinEdges",       hist_contra.BinEdges, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.ipsi_color, ...
          "FaceAlpha",      0.5, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      0.5);
setStyle(title = "SNR", ...
         ylabel = "Probability", ...
         interpreter = "none", ...
         fontSize = 11, ...
         xlim = [-0.06, 6.06], ...
         xticks = 0:2:6, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Plot spikes_max histogram for contra and ipsi.
nexttile(tile_idx(14,1), [6,6]); hold on; pbaspect([1,1,1]);
smax_contra = cellfun(@(x) max(x, [], "all"), cells_table{:, "kern_contra"});
smax_ipsi = cellfun(@(x) max(x, [], "all"), cells_table{:, "kern_ipsi"});
hist_contra = histogram(smax_contra, ...
                        "Normalization", "probability", ...
                        "FaceColor",      NVAs.contra_color, ...
                        "FaceAlpha",      0.7, ...
                        "EdgeColor",     "w", ...
                        "EdgeAlpha",      0.7);
histogram(smax_ipsi, ...
          "BinEdges",       hist_contra.BinEdges, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.ipsi_color, ...
          "FaceAlpha",      0.5, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      0.5);
setStyle(title = "spikes_max", ...
         ylabel = "Probability", ...
         interpreter = "none", ...
         fontSize = 11, ...
         xlim = [-0.015, 1.515], ...
         xticks = 0:0.5:1.5, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Find SNR threshold from pooled contra & ipsi.
tmax_pool = vertcat(tmax_contra, tmax_ipsi);
tmax_idx = tmax_pool >= 5 & tmax_pool <= 11;
snr_pool = vertcat(snr_contra, snr_ipsi);
snr_mean = mean(snr_pool(~tmax_idx), "omitnan");
snr_std = std(snr_pool(~tmax_idx), "omitnan");
snr_thr = snr_mean + 3*snr_std;

% Scatter t_max against SNR.
nexttile(tile_idx(1,7), [3,6]); axis off;
nexttile(tile_idx(4,7), [6,6]); hold on; pbaspect([1,1,1]);
scatter(tmax_contra, snr_contra, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.contra_color, ...
        "MarkerEdgeColor", NVAs.contra_color, ...
        "MarkerFaceAlpha", 0.7, ...
        "MarkerEdgeAlpha", 0.7);
scatter(tmax_ipsi, snr_ipsi, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.ipsi_color, ...
        "MarkerEdgeColor", NVAs.ipsi_color, ...
        "MarkerFaceAlpha", 0.5, ...
        "MarkerEdgeAlpha", 0.5);
yline(snr_thr, "--k", "LineWidth",1.5);
setStyle(ylabel = "SNR", ...
         xlabel = "t_max", ...
         interpreter = "none", ...
         fontSize = 11);

% Scatter spikes_max against SNR.
nexttile(tile_idx(10,7), [1,6]); axis off;
nexttile(tile_idx(11,7), [6,6]); hold on; pbaspect([1,1,1]);
scatter(smax_contra, snr_contra, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.contra_color, ...
        "MarkerEdgeColor", NVAs.contra_color, ...
        "MarkerFaceAlpha", 0.7, ...
        "MarkerEdgeAlpha", 0.7);
scatter(smax_ipsi, snr_ipsi, ...
        20, ...
        "o", ...
        "filled", ...
        "MarkerFaceColor", NVAs.ipsi_color, ...
        "MarkerEdgeColor", NVAs.ipsi_color, ...
        "MarkerFaceAlpha", 0.5, ...
        "MarkerEdgeAlpha", 0.5);
setStyle(ylabel = "SNR", ...
         xlabel = "spikes_max", ...
         interpreter = "none", ...
         fontSize = 11);
nexttile(tile_idx(18,7), [3,6]); axis off; pbaspect([3,1,1]);



% Draw pie chart showing fraction un-, contra-, ipsi-, and both-responsive.
resp_frac = flip([nnz(snr_contra <= snr_thr & snr_ipsi <= snr_thr)/num_cells, ...
                  nnz(snr_contra > snr_thr & snr_ipsi <= snr_thr)/num_cells, ...
                  nnz(snr_contra <= snr_thr & snr_ipsi > snr_thr)/num_cells, ...
                  nnz(snr_contra > snr_thr & snr_ipsi > snr_thr)/num_cells]);
nexttile(tile_idx(4,14), [6,6]); hold on; pbaspect([1,1,1]);
slice_colors = {[0.6, 0.6, 0.6], NVAs.contra_color, NVAs.ipsi_color, NVAs.bino_color};
slice_names = ["Unresponsive", "Contra", "Ipsi", "Both"];
rf_pie = pie(resp_frac, slice_names);
axis off; title("  ");
for pie_slice = 1:2:7
    rf_pie(pie_slice).FaceColor = slice_colors{1:2:7 == pie_slice};
    rf_pie(pie_slice).EdgeColor = "w";
    vertices = rf_pie(pie_slice).Vertices;
    [cent_x, cent_y] = centroid(polyshape({vertices(:,1)}, {vertices(:,2)}));
    text(cent_x, cent_y, ...
         sprintf("%.0f%%", resp_frac(1:2:7 == pie_slice)*100), ...
                 "FontWeight","bold", ...
                 "FontSize",11, ...
                 "Color","w", ...
                 "HorizontalAlignment","center", ...
                 "VerticalAlignment","middle");
    rf_pie(pie_slice + 1).FontSize = 12;
    rf_pie(pie_slice + 1).FontWeight = "bold";
end

% Plot matching coefficient histogram.
bino_idx = snr_contra > snr_thr & snr_ipsi > snr_thr;
kern_contra_bino = cells_table{bino_idx, "kern_contra"};
kern_ipsi_bino = cells_table{bino_idx, "kern_ipsi"};
kern_contra_bino = cell2mat(cellfun(@(x) reshape(x, 1, []), kern_contra_bino, "UniformOutput",false))';
kern_ipsi_bino = cell2mat(cellfun(@(x) reshape(x, 1, []), kern_ipsi_bino, "UniformOutput",false))';
matching_coeffs = diag(corr(kern_contra_bino, kern_ipsi_bino));
nexttile(tile_idx(11,13), [6,8]); hold on; pbaspect([8,6,1]);
histogram(matching_coeffs, ...
          "BinEdges", -1:0.2:1, ...
          "Normalization", "probability", ...
          "FaceColor",      NVAs.bino_color, ...
          "FaceAlpha",      1, ...
          "EdgeColor",     "w", ...
          "EdgeAlpha",      1);
xline(median(matching_coeffs), "--k", "LineWidth",1.5);
setStyle(title = "Matching Coefficient", ...
         ylabel = "Probability", ...
         interpreter = "none", ...
         fontSize = 11, ...
         xlim = [-1, 1], ...
         xticks = -1:0.2:1, ...
         ylim = [-0.005, 0.505], ...
         yticks = 0:0.1:0.5);

% Plot boxes of spatial frequency tuning for mono-contra, mono-ipsi,
% bino-contra, and bino-ipsi.
contra_idx = snr_contra > snr_thr & snr_ipsi <= snr_thr;
ipsi_idx = snr_contra <= snr_thr & snr_ipsi > snr_thr;
max_cells = max([nnz(bino_idx), nnz(contra_idx), nnz(ipsi_idx)]);
sf_est_contra = cells_table{:, "sf_est_contra"};
sf_est_ipsi = cells_table{:, "sf_est_ipsi"};
sf_box_data = nan(max_cells, 4);
sf_box_data(1:nnz(contra_idx), 1) = sf_est_contra(contra_idx); % Mono contra
sf_box_data(1:nnz(ipsi_idx), 2) = sf_est_ipsi(ipsi_idx); % Mono ipsi
sf_box_data(1:nnz(bino_idx), 3) = sf_est_contra(bino_idx); % Bino contra
sf_box_data(1:nnz(bino_idx), 4) = sf_est_ipsi(bino_idx); % Bino ipsi
nexttile(tile_idx(2,21), [6,6]); hold on; pbaspect([1,1,1]);
boxPlot(sf_box_data, ...
        groupSize = 2, ...
        labelGroup = true, ...
        boxLabels = {'Mono', 'Bino'}, ...
        boxColors = {NVAs.contra_color, NVAs.ipsi_color});
setStyle(title = "Spatial Frequency", ...
         ylabel = "Cycles/Degree", ...
         ylim = [-0.016, 0.176], ...
         yticks = 0:0.04:0.16, ...
         fontSize = 11);

% Plot boxes of orientation tuning for mono-contra, mono-ipsi,
% bino-contra, and bino-ipsi.
cv_contra = circularVariance(cells_table{:, "resp_ori_contra"});
cv_ipsi = circularVariance(cells_table{:, "resp_ori_ipsi"});
cv_box_data = nan(max_cells, 4);
cv_box_data(1:nnz(contra_idx), 1) = cv_contra(contra_idx); % Mono contra
cv_box_data(1:nnz(ipsi_idx), 2) = cv_ipsi(ipsi_idx); % Mono ipsi
cv_box_data(1:nnz(bino_idx), 3) = cv_contra(bino_idx); % Bino contra
cv_box_data(1:nnz(bino_idx), 4) = cv_ipsi(bino_idx); % Bino ipsi
nexttile(tile_idx(8,21), [6,6]); hold on; pbaspect([1,1,1]);
boxPlot(cv_box_data, ...
        groupSize = 2, ...
        labelGroup = true, ...
        boxLabels = {'Mono', 'Bino'}, ...
        boxColors = {NVAs.contra_color, NVAs.ipsi_color});
setStyle(title = "Orientation Tuning", ...
         ylabel = "Circular Variance", ...
         ylim = [-0.1, 1.1], ...
         yticks = 0:0.2:1, ...
         fontSize = 11);

% Plot boxes of response linearity for mono-contra, mono-ipsi,
% bino-contra, and bino-ipsi.
max_cells = max([nnz(bino_idx), nnz(contra_idx), nnz(ipsi_idx)]);
f1f0_contra = cells_table{:, "f1f0_contra"};
f1f0_ipsi = cells_table{:, "f1f0_ipsi"};
f1f0_box_data = nan(max_cells, 4);
f1f0_box_data(1:nnz(contra_idx), 1) = f1f0_contra(contra_idx); % Mono contra
f1f0_box_data(1:nnz(ipsi_idx), 2) = f1f0_ipsi(ipsi_idx); % Mono ipsi
f1f0_box_data(1:nnz(bino_idx), 3) = f1f0_contra(bino_idx); % Bino contra
f1f0_box_data(1:nnz(bino_idx), 4) = f1f0_ipsi(bino_idx); % Bino ipsi
nexttile(tile_idx(14,21), [6,6]); hold on; pbaspect([1,1,1]);
boxPlot(f1f0_box_data, ...
        groupSize = 2, ...
        labelGroup = true, ...
        boxLabels = {'Mono', 'Bino'}, ...
        boxColors = {NVAs.contra_color, NVAs.ipsi_color});
setStyle(title = "Response Linearity", ...
         ylabel = "F1/F0", ...
         ylim = [-0.2, 2.2], ...
         yticks = 0:0.5:2, ...
         fontSize = 11);

% Plot polar histograms for monocular orientation tuning.
ori_est_contra = deg2rad(cells_table{:, "ori_est_contra"}(contra_idx));
ori_est_ipsi = deg2rad(cells_table{:, "ori_est_ipsi"}(ipsi_idx));
contra_title = sprintf('\\color[rgb]{%.1f %.1f %.1f}Contra', NVAs.contra_color);
ipsi_title = sprintf('\\color[rgb]{%.1f %.1f %.1f}Ipsi', NVAs.ipsi_color);
ax = nexttile(tile_idx(1,27), [6,6]); hold on; pbaspect([1,1,1]); axis off;
insetPolarHist([ori_est_contra; ori_est_contra + pi], ...
               f, ...
               ax, ...
               title = contra_title, ...
               title_interpreter = "tex", ...
               face_color = NVAs.contra_color, ...
               pos_adj = [0.0077, -0.0375, 0.02, 0.02]);

ax = nexttile(tile_idx(1,33), [6,6]); hold on; pbaspect([1,1,1]); axis off;
insetPolarHist([ori_est_ipsi; ori_est_ipsi + pi], ...
               f, ...
               ax, ...
               title = ipsi_title, ...
               title_interpreter = "tex", ...
               face_color = NVAs.ipsi_color, ...
               pos_adj = [-0.0123, -0.0375, 0.02, 0.02]);

ori_sf_contra = [ori_est_contra, sf_est_contra(contra_idx)];
ori_sf_ipsi = [ori_est_ipsi + pi, sf_est_ipsi(ipsi_idx)];
ax = nexttile(tile_idx(1,39), [6,6]); hold on; pbaspect([1,1,1]); axis off;
% Create colored theta tick labels for contra/ipsi.
contra_0 = sprintf('\\color[rgb]{%.1f %.1f %.1f}0', NVAs.contra_color);
contra_180 = sprintf('\\color[rgb]{%.1f %.1f %.1f}180', NVAs.contra_color);
ipsi_0 = sprintf('\\color[rgb]{%.1f %.1f %.1f}0', NVAs.ipsi_color);
ipsi_180 = sprintf('\\color[rgb]{%.1f %.1f %.1f}180', NVAs.ipsi_color);
tick_top = [contra_0, ' \color{black}/ ', ipsi_180];
tick_left = sprintf('\\color[rgb]{%.1f %.1f %.1f}90', NVAs.contra_color);
tick_bottom = [contra_180, ' \color{black}/ ', ipsi_0];
tick_right = sprintf('\\color[rgb]{%.1f %.1f %.1f}90', NVAs.ipsi_color);
theta_tick_labels = {tick_top,' ',' ',tick_left,' ',' ',tick_bottom,' ',' ',tick_right,' ',' ',' '};
insetPolarScatter({ori_sf_ipsi, ori_sf_contra}, ...
                  f, ...
                  ax, ...
                  title = [contra_title, ' \color{black}/ ', ipsi_title], ...
                  title_interpreter = "tex", ...
                  theta_tick_labels = theta_tick_labels, ...
                  face_colors = {NVAs.ipsi_color, NVAs.contra_color}, ...
                  pos_adj = [-0.0325, -0.0375, 0.02, 0.02]);

% Plot polar histograms for binocular orientation tuning.
ori_est_contra = deg2rad(cells_table{:, "ori_est_contra"}(bino_idx));
ori_est_ipsi = deg2rad(cells_table{:, "ori_est_ipsi"}(bino_idx));
ax = nexttile(tile_idx(15,27), [6,6]); hold on; pbaspect([1,1,1]); axis off;
insetPolarHist([ori_est_contra; ori_est_contra + pi], ...
               f, ...
               ax, ...
               title = "", ...
               face_color = NVAs.contra_color, ...
               pos_adj = [0.0077, -0.01, 0.02, 0.02]);

ax = nexttile(tile_idx(15,33), [6,6]); hold on; pbaspect([1,1,1]); axis off;
insetPolarHist([ori_est_ipsi; ori_est_ipsi + pi], ...
               f, ...
               ax, ...
               title = "", ...
               face_color = NVAs.ipsi_color, ...
               pos_adj = [-0.0123, -0.01, 0.02, 0.02]);

ori_sf_contra = [ori_est_contra, sf_est_contra(bino_idx)];
ori_sf_ipsi = [ori_est_ipsi + pi, sf_est_ipsi(bino_idx)];
ax = nexttile(tile_idx(15,39), [6,6]); hold on; pbaspect([1,1,1]); axis off;
insetPolarScatter({ori_sf_ipsi, ori_sf_contra}, ...
                  f, ...
                  ax, ...
                  title = "", ...
                  theta_tick_labels = theta_tick_labels, ...
                  face_colors = {NVAs.ipsi_color, NVAs.contra_color}, ...
                  pos_adj = [-0.0325, -0.01, 0.02, 0.02]);

% Scatter spatial frequency vs. circular variance colored by response
% linearity
cmap = viridis;
cv_contra = circularVariance(cells_table{:, "resp_ori_contra"});
sf_est_contra = cells_table{:, "sf_est_contra"};
% Mono contra
ax = nexttile(tile_idx(6,28), [4,4]); axis off;
insetColorScatter(sf_est_contra(contra_idx), cv_contra(contra_idx), ...
                  f1f0_contra(contra_idx), ...
                  cmap, ...
                  f, ...
                  ax, ...
                  xlim = [0, 0.16], ...
                  xticks = [0, 0.04, 0.08, 0.12, 0.16], ...
                  xticklabels = ["","","","",""], ...
                  yticks = [0, 0.25, 0.5, 0.75, 1], ...
                  yticklabels = ["0","","0.5","","1"], ...
                  ytickangle = 90, ...
                  ylabel = "\fontsize{10}Circular Variance", ...
                  interpreter = "tex", ...
                  pos_adj = [0.01, -0.04, 0.015, 0.015]);
% Bino contra
ax = nexttile(tile_idx(10,28), [4,4]); axis off;
insetColorScatter(sf_est_contra(bino_idx), cv_contra(bino_idx), ...
                  f1f0_contra(bino_idx), ...
                  cmap, ...
                  f, ...
                  ax, ...
                  xlim = [0, 0.16], ...
                  xticks = [0, 0.04, 0.08, 0.12, 0.16], ...
                  xticklabels = ["0","","0.08","","0.16"], ...
                  yticks = [0, 0.25, 0.5, 0.75, 1], ...
                  yticklabels = ["0","","0.5","","1"], ...
                  ytickangle = 90, ...
                  ylabel = "\fontsize{10}Circular Variance", ...
                  xlabel = "\fontsize{10}Spatial Frequency", ...
                  interpreter = "tex", ...
                  pos_adj = [0.01, -0.04, 0.015, 0.015]);
% Mono ipsi
ax = nexttile(tile_idx(6,34), [4,4]); axis off;
insetColorScatter(sf_est_ipsi(ipsi_idx), cv_ipsi(ipsi_idx), ...
                  f1f0_ipsi(ipsi_idx), ...
                  cmap, ...
                  f, ...
                  ax, ...
                  xlim = [0, 0.16], ...
                  xticks = [0, 0.04, 0.08, 0.12, 0.16], ...
                  xticklabels = ["","","","",""], ...
                  yticks = [0, 0.25, 0.5, 0.75, 1], ...
                  yticklabels = ["","","","",""], ...
                  pos_adj = [-0.01, -0.04, 0.015, 0.015]);
% Bino ipsi
ax = nexttile(tile_idx(10,34), [4,4]); axis off;
insetColorScatter(sf_est_ipsi(bino_idx), cv_ipsi(bino_idx), ...
                  f1f0_ipsi(bino_idx), ...
                  cmap, ...
                  f, ...
                  ax, ...
                  xlim = [0, 0.16], ...
                  xlabel = "\fontsize{10}Spatial Frequency", ...
                  xticks = [0, 0.04, 0.08, 0.12, 0.16], ...
                  xticklabels = ["0","","0.08","","0.16"], ...
                  yticks = [0, 0.25, 0.5, 0.75, 1], ...
                  yticklabels = ["","","","",""], ...
                  interpreter = "tex", ...
                  pos_adj = [-0.01, -0.04, 0.015, 0.015]);

% Overlay contra/ipsi spatial frequency vs. circular variance densities
% Mono contra & ipsi
ax = nexttile(tile_idx(6,40), [4,4]); axis off;
insetDensityPlot(sf_est_contra(contra_idx), cv_contra(contra_idx), ...
                 sf_est_ipsi(ipsi_idx), cv_ipsi(ipsi_idx), ...
                 {[0,0,0.9], [0.9,0,0]}, ...
                 f, ...
                 ax, ...
                 xticks = [0, 25, 50, 75, 100], ...
                 xticklabels = ["","","","",""], ...
                 yticks = [0, 25, 50, 75, 100], ...
                 yticklabels = ["","","","",""], ...
                 pos_adj = [-0.03, -0.04, 0.015, 0.015]);
% Bino contra & ipsi
ax = nexttile(tile_idx(10,40), [4,4]); axis off;
insetDensityPlot(sf_est_contra(bino_idx), cv_contra(bino_idx), ...
                 sf_est_ipsi(bino_idx), cv_ipsi(bino_idx), ...
                 {[0,0,0.9], [0.9,0,0]}, ...
                 f, ...
                 ax, ...
                 xticks = [0, 25, 50, 75, 100], ...
                 xticklabels = ["0","","0.08","","0.16"], ...
                 yticks = [0, 25, 50, 75, 100], ...
                 yticklabels = ["","","","",""], ...
                 xtickangle = 0, ...
                 xlabel = "\fontsize{10}Spatial Frequency", ...
                 interpreter = "tex", ...
                 pos_adj = [-0.03, -0.04, 0.015, 0.015]);

% Add title
annotation("textbox", ...
           "String",NVAs.title, ...
           "Interpreter", "none", ...
           "FontWeight","bold", ...
           "FontSize",15, ...
           "EdgeColor","none", ...
           "HorizontalAlignment","center", ...
           "VerticalAlignment","middle", ...
           "Rotation",0, ...
           "Position",[0.18, 0.93, 0.2, 0]);
% Add contra/ipsi legend
annotation("textbox", ...
           "String", "Contra", ...
           "Interpreter", "none", ...
           "FontWeight","bold", ...
           "FontSize",15, ...
           "Color", NVAs.contra_color, ...
           "EdgeColor","none", ...
           "HorizontalAlignment","center", ...
           "VerticalAlignment","middle", ...
           "Rotation",0, ...
           "Position",[0.215, 0.9, 0.1, 0]);
annotation("textbox", ...
           "String", "Ipsi", ...
           "Interpreter", "none", ...
           "FontWeight","bold", ...
           "FontSize",15, ...
           "Color", NVAs.ipsi_color, ...
           "EdgeColor","none", ...
           "HorizontalAlignment","center", ...
           "VerticalAlignment","middle", ...
           "Rotation",0, ...
           "Position",[0.245, 0.9, 0.1, 0]);

f.Position = [112, 1363, 1368, 576];

% % Save the figure to file.
% imwrite(getframe(f).cdata, ...
%         NVAs.save_path, ...
%         "jpeg", ...
%         "Mode", "lossless", ...
%         "Quality", 100);

end

function insetPolarHist(data, fig, ax, NVAs)
% INSETPOLARHIST Add polar histogram to TiledLayout Chart.
arguments
    data
    fig
    ax
    NVAs.pos_adj (1,4) double = [-0.01, -0.01, 0.02, 0.02]
    NVAs.theta_tick_labels = ["0"," "," ","90"," "," ","180"," "," ","270"," "," "," "]
    NVAs.tick_label_interpreter = "tex"
    NVAs.title (1,1) string = ""
    NVAs.title_interpreter = "none"
    NVAs.face_color
end

outer_position = ax.OuterPosition;
f_temp = figure(100); ax_polar = polaraxes("Parent", f_temp);
polarhistogram(data, ...
               -pi/32 : pi/16 : pi*63/32, ...
               "Normalization","probability", ...
               "FaceColor", NVAs.face_color, ...
               "EdgeColor", "none");
title(NVAs.title, "Interpreter", NVAs.title_interpreter); axis tight;
set(ax_polar, ...
    "ThetaZeroLocation", "top", ...
    "RLim", [0, 0.1], ...
    "RTick", [0.05, 0.1], ...
    "RAxisLocation", 315, ...
    "RTickLabelRotation", -45, ...
    "ThetaTick", 0:30:360, ...
    "ThetaTickLabel", NVAs.theta_tick_labels, ...
    "TickLabelInterpreter", NVAs.tick_label_interpreter, ...
    "FontSize", 11);
copyobj(ax_polar, fig);
fig.Children(1).Position = outer_position + NVAs.pos_adj;
close(f_temp);

end

function insetPolarScatter(datas, fig, ax, NVAs)
% INSETPOLARSCATTER Add polar scatterplot to TiledLayout Chart.
arguments
    datas
    fig
    ax
    NVAs.pos_adj (1,4) double = [-0.01, -0.01, 0.02, 0.02]
    NVAs.theta_tick_labels = ["0/180"," "," ","90"," "," ","180/0"," "," ","90"," "," "," "]
    NVAs.tick_label_interpreter = "tex"
    NVAs.title (1,1) string = ""
    NVAs.title_interpreter = "none"
    NVAs.face_colors
end

outer_position = ax.OuterPosition;
f_temp = figure(100); ax_polar = polaraxes("Parent", f_temp); hold on;
polarscatter(datas{1}(:,1), ...
             datas{1}(:,2), ...
              "MarkerFaceColor", NVAs.face_colors{1}, ...
              "MarkerFaceAlpha", 0.3, ...
              "MarkerEdgeColor", "none");
polarscatter(datas{2}(:,1), ...
             datas{2}(:,2), ...
              "MarkerFaceColor", NVAs.face_colors{2}, ...
              "MarkerFaceAlpha", 0.3, ...
              "MarkerEdgeColor", "none");
title(NVAs.title, "Interpreter", NVAs.title_interpreter);
set(ax_polar, ...
    "ThetaZeroLocation", "top", ...
    "RLim", [0, 0.16], ...
    "RTick", [0, 0.08, 0.16], ...
    "RAxisLocation", 315, ...
    "RTickLabelRotation", -45, ...
    "ThetaTick", 0:30:360, ...
    "ThetaTickLabel", NVAs.theta_tick_labels, ...
    "TickLabelInterpreter", NVAs.tick_label_interpreter, ...
    "FontSize", 11);
copyobj(ax_polar, fig);
fig.Children(1).Position = outer_position + NVAs.pos_adj;
close(f_temp);

end

function insetColorScatter(X, Y, cvals, cmap, fig, ax, NVAs)
% INSETPOLARSCATTER Add polar scatterplot to TiledLayout Chart.
arguments
    X
    Y
    cvals
    cmap
    fig
    ax
    NVAs.pos_adj (1,4) double = [-0.0005, -0.0005, 0.001, 0.001]
    NVAs.title (1,1) string = ""
    NVAs.xlim = []
    NVAs.xticks = []
    NVAs.xticklabels = []
    NVAs.xtickangle = 0
    NVAs.xlabel (1,1) string = ""
    NVAs.yticks = nan
    NVAs.yticklabels = []
    NVAs.ytickangle = 0
    NVAs.ylabel (1,1) string = ""
    NVAs.interpreter (1,1) string = "none"
end

outer_position = ax.OuterPosition;
f_temp = figure(100); ax_scatter = axes; hold on; pbaspect([1,1,1]);
scatter(X, Y, ...
        20, ...
        cvals, ...
        "filled", ...
        "MarkerFaceAlpha", 0.7, ...
        "MarkerEdgeAlpha", 0.7);
colormap(ax_scatter, cmap);
setStyle(title = NVAs.title, ...
         xlim = NVAs.xlim, ...
         xticks = NVAs.xticks, ...
         xticklabels = NVAs.xticklabels, ...
         xtickangle = NVAs.xtickangle, ...
         xlabel = NVAs.xlabel, ...
         yticks = NVAs.yticks, ...
         yticklabels = NVAs.yticklabels, ...
         ytickangle = NVAs.ytickangle, ...
         ylabel = NVAs.ylabel, ...
         interpreter = NVAs.interpreter, ...
         tickLength = [0.04, 0.04], ...
         fontSize = 11);
copyobj(ax_scatter, fig);
fig.Children(1).Position = outer_position + NVAs.pos_adj;
close(f_temp);

end

function insetDensityPlot(X1, Y1, X2, Y2, colors, fig, ax, NVAs)
% INSETDENSITYPLOT Add density plot to TiledLayout Chart.
arguments
    X1
    Y1
    X2
    Y2
    colors
    fig
    ax
    NVAs.clims = {}
    NVAs.pos_adj (1,4) double = [-0.0005, -0.0005, 0.001, 0.001]
    NVAs.title (1,1) string = ""
    NVAs.xticks = []
    NVAs.xticklabels = []
    NVAs.xtickangle = 0
    NVAs.xlabel (1,1) string = ""
    NVAs.yticks = nan
    NVAs.yticklabels = []
    NVAs.ylabel (1,1) string = ""
    NVAs.interpreter = "none"
end

outer_position = ax.OuterPosition;
f_temp = figure(100); ax_imagesc = axes; hold on; pbaspect([1,1,1]);
nrows = 100;
ncols = 100;
[xq,yq] = meshgrid(linspace(0, 0.16, nrows), linspace(0, 1, ncols));
xq = xq(:);
yq = yq(:);
xi = [xq yq];
% X1, Y1
dens1 = ksdensity([X1, Y1], xi);
cmap1 = colormapData(dens1, [0, max(dens1)], colors{1}, 100);
% X2, Y2
dens2 = ksdensity([X2, Y2], xi);
cmap2 = colormapData(dens2, [0, max(dens2)], colors{2}, 100);
cmap_mean = mean(cat(3,cmap1,cmap2),3);
im = permute(reshape(permute(cmap_mean, [1, 3, 2]), [nrows, ncols, 3]), [1, 2, 3]);
imagesc(im, "AlphaData",1);
setStyle(title = NVAs.title, ...
         xticks = NVAs.xticks, ...
         xlabel = NVAs.xlabel, ...
         xticklabels = NVAs.xticklabels, ...
         xtickangle = NVAs.xtickangle, ...
         yticks = NVAs.yticks, ...
         yticklabels = NVAs.yticklabels, ...
         ylabel = NVAs.ylabel, ...
         tickLength = [0.04, 0.04], ...
         fontSize = 11, ...
         interpreter = NVAs.interpreter);
copyobj(ax_imagesc, fig);
fig.Children(1).Position = outer_position + NVAs.pos_adj;
close(f_temp);

end

function data_map = colormapData(data, clim, color, nvals)

arguments
    data
    clim
    color
    nvals
end

cmap_idx = linspace(0, 1, nvals);
cmap = vertcat(linspace(1, color(1), nvals), ...
               linspace(1, color(2), nvals), ...
               linspace(1, color(3), nvals))';
% Max-normalize data and set values greater than 1 to 1.
norm_data = (data - clim(1))/clim(2);
norm_data(norm_data > 1) = 1;
% Interpolate colormap at data points.
data_map = horzcat(interp1(cmap_idx, cmap(:,1), norm_data), ...
                   interp1(cmap_idx, cmap(:,2), norm_data), ...
                   interp1(cmap_idx, cmap(:,3), norm_data));

end

% Define statistic calculations.

function CV = circularVariance(ori_response, NVAs)
% CIRCULAR VARIANCE Calculate circular variance.
arguments
    ori_response
    NVAs.ori_stimuli = 0:10:170
end

ori_stimuli_transform = 1i * 2*pi * NVAs.ori_stimuli / 180;
CV = 1 - (abs(sum(ori_response .* exp(ori_stimuli_transform), 2)) ./ sum(abs(ori_response), 2));

end
