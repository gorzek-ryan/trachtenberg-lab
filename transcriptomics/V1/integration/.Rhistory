source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
obj.glutamatergic <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_glutamatergic_processed.rds")
obj.gabaergic <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_gabaergic_processed.rds")
obj.nonneuronal <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_nonneuronal_processed.rds")
obj <- merge(obj.glutamatergic, y = c(obj.gabaergic, obj.nonneuronal))
obj.ctx <- readRDS("E:/STOmics/seurat/opossum_stereoseq_ctx_1.rds")
VlnPlot(obj.ctx, "nFeature_RNA")
VlnPlot(obj.ctx, "nCount_RNA")
summary(obj.ctx$nFeature_RNA)
summary(obj.ctx$nCount_RNA)
ImageDimPlot(obj.ctx, size = 2.5)
cell_mask <- Reduce(intersect,list(WhichCells(obj.ctx, expression = nFeature_RNA > 50),
WhichCells(obj.ctx, expression = nCount_RNA > 100)))
gene_mask <- rownames(obj.ctx)[Matrix::rowSums(obj.ctx[["RNA"]]@counts > 0) > 8]
obj.ctx <- subset(obj.ctx, features = gene_mask, cells = cell_mask)
VlnPlot(obj.ctx, "nFeature_RNA")
VlnPlot(obj.ctx, "nCount_RNA")
summary(obj.ctx$nFeature_RNA)
summary(obj.ctx$nCount_RNA)
ImageDimPlot(obj.ctx, size = 2.5)
obj <- ClusterSCT(obj, resolutions = 1)
obj.ctx <- ClusterSCT(obj.ctx, resolutions = 1)
opossum.subclass.levels <- c("IT_A", "IT_C", "IT_B", "IT_D", "L5NP", "L5PT", "L6CT", "L6b", "Pvalb", "Sst", "Vip", "Lamp5", "Frem1", "OD", "OPC", "Astro", "Micro", "Endo")
DimPlot(obj, group.by = "subclass", label = TRUE, cols = colors_list[opossum.subclass.levels]) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
DimPlot(obj, group.by = "subclass", cols = colors_list[opossum.subclass.levels]) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
DimPlot(obj.ctx) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
opossum.subclass.levels <- c("IT_A", "IT_C", "IT_B", "IT_D", "L5NP", "L5PT", "L6CT", "L6b", "Pvalb", "Sst", "Vip", "Lamp5", "Frem1", "OD", "OPC", "Astro", "Micro", "Endo")
DimPlot(obj, group.by = "subclass", cols = colors_list[opossum.subclass.levels]) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
DimPlot(obj.ctx) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
opossum.subclass.levels <- c("IT_A", "IT_C", "IT_B", "IT_D", "L5NP", "L5PT", "L6CT", "L6b", "Pvalb", "Sst", "Vip", "Lamp5", "Frem1", "OD", "OPC", "Astro", "Micro", "Endo")
DimPlot(obj, group.by = "subclass", cols = colors_list[opossum.subclass.levels]) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
DimPlot(obj.ctx) + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
ImageDimPlot(obj.ctx, size = 2.5)
opossum.subclass.levels <- c("IT_A", "IT_C", "IT_B", "IT_D", "L5NP", "L5PT", "L6CT", "L6b", "Pvalb", "Sst", "Vip", "Lamp5", "Frem1", "OD", "OPC", "Astro", "Micro", "Endo")
DimPlot(obj, group.by = "subclass", cols = colors_list[opossum.subclass.levels]) + NoLegend() + xlim(-20, 20) + ylim(-20, 20) + coord_equal()
DimPlot(obj.ctx, group.by = "SCT_snn_res.1") + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
obj.ctx <- ClusterSCT(obj.ctx, resolutions = 0.5)
DimPlot(obj.ctx, group.by = "SCT_snn_res.0.5") + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
ImageDimPlot(obj.ctx, group.by = "SCT_snn_res.0.5", size = 2.5)
obj.ctx <- MapObject(obj, obj.ctx, "class", do.norm = FALSE)
saveRDS(obj.ctx, "E:/STOmics/seurat/opossum_stereoseq_ctx_1_clustered_mapped.rds")
obj.ctx.glutamatergic <- subset(obj.ctx, predicted.class == "glutamatergic")
obj.ctx.glutamatergic <- ClusterSCT(obj.ctx.glutamatergic, resolutions = 1)
obj.glutamatergic <- ClusterSCT(obj.glutamatergic, resolutions = 1)
obj.ctx.glutamatergic <- MapObject(obj.glutamatergic, obj.ctx.glutamatergic, "subclass", do.norm = FALSE)
saveRDS(obj.glutamatergic, "E:/STOmics/seurat/opossum_glutamatergic_reference.rds")
saveRDS(obj.ctx.glutamatergic, "E:/STOmics/seurat/opossum_stereoseq_glutamatergic_1_clustered_mapped.rds")
Idents(obj.ctx.glutamatergic) <- "predicted.subclass"
# , cols = c("#B4B4B4", "#128e27", "#1E90FF", "#881bd1", "#fcba03", "#0febf2"
ImageDimPlot(obj.ctx.glutamatergic, group.by = "predicted.subclass", size = 2.5)
column.coords <- Crop(obj.ctx.glutamatergic[["COL"]], x = c(5000, 6000), y = c(1000, 10000), coords = "plot")
obj.ctx.glutamatergic
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(5000, 6000), y = c(1000, 10000), coords = "plot")
obj.ctx.glutamatergic[["CTX"]]
obj.ctx.glutamatergic[["CTX"]]$centroids
obj.ctx.glutamatergic[["CTX"]]$centroids@coords
summary(obj.ctx.glutamatergic[["CTX"]]$centroids@coords)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(5000, 6000), y = c(8000, 15000), coords = "plot")
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(5001, 6000), y = c(8000, 15000), coords = "plot")
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(5001, 6000), y = c(8000, 15000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- cropped.coords
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(5000, 6000), y = c(8000, 15000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(5000, 6000), y = c(8000, 15000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(8000, 15000), y = c(5000, 6000), coords = "tissue")
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(5000, 8000), y = c(8000, 15000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(7000, 8500), y = c(8000, 15000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(6500, 8500), y = c(8000, 15000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(6750, 8500), y = c(8000, 15000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(6750, 8500), y = c(10000, 11000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(6750, 8500), y = c(10000, 12000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
column.coords <- Crop(obj.ctx.glutamatergic[["CTX"]], x = c(6750, 8500), y = c(10000, 12000), coords = "tissue")
obj.ctx.glutamatergic[["COL"]] <- column.coords
ImageDimPlot(obj.ctx.glutamatergic, fov = "COL", size = 3)
obj.ctx.glutamatergic.COL <- subset(obj.ctx.glutamatergic, cells = Cells(obj.ctx.glutamatergic[["COL"]]))
obj.ctx.glutamatergic.COL <- ClusterSCT(obj.ctx.glutamatergic.COL, resolutions = 1)
obj.ctx.glutamatergic.COL <- MapObject(obj.glutamatergic, obj.ctx.glutamatergic.COL, "subclass", do.norm = FALSE)
Idents(obj.ctx.glutamatergic.COL) <- "predicted.subclass"
ImageDimPlot(obj.ctx.glutamatergic.COL, fov = "COL", size = 3)
DimPlot(obj.ctx.glutamatergic.COL, group.by = "SCT_snn_res.1") + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "SCT_snn_res.1") + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "predicted.subclass") + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "SCT_snn_res.1") + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "predicted.subclass") + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "SCT_snn_res.1", label = TRUE) + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "predicted.subclass") + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
FeaturePlot(obj.ctx.glutamatergic.COL, "Foxp2") + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "SCT_snn_res.1", label = TRUE) + NoLegend() + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
DimPlot(obj.ctx.glutamatergic.COL, group.by = "predicted.subclass") + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
FeaturePlot(obj.ctx.glutamatergic.COL, "Foxp2") + xlim(-8, 8) + ylim(-8, 8) + coord_equal()
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(monocle3)
library(pheatmap)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
obj.opossum.glutamatergic <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_glutamatergic_processed.rds")
obj.mouse.glutamatergic <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_P38_glutamatergic_processed.rds")
Idents(obj.opossum.glutamatergic) <- "subclass"
obj.opossum.IT <- subset(obj.opossum.glutamatergic, idents = c("IT_A", "IT_B", "IT_C", "IT_D"))
obj.opossum.IT <- NormalizePCA(obj.opossum.IT)
Idents(obj.mouse.glutamatergic) <- "subclass"
obj.mouse.IT <- subset(obj.mouse.glutamatergic, idents = c("L2/3", "L4", "L5IT", "L6IT"))
obj.mouse.IT <- NormalizePCA(obj.mouse.IT)
subclass.markers.opossum <- FindAllMarkers(obj.opossum.IT, min.pct = 0.1, only.pos = TRUE)
subclass.markers.mouse <- FindAllMarkers(obj.mouse.IT, min.pct = 0.1, only.pos = TRUE)
cluster_pairs = list(c("IT_A", "L2/3"), c("IT_B", "L4"), c("IT_C", "L5IT"), c("IT_D", "L6IT"))
PlotSubclassGeneCountCDFDiff(list(subclass = subclass.markers.opossum),
list(subclass = subclass.markers.mouse),
cluster_pairs, as.character(colors_list[c("L2/3", "L4", "L5IT", "L6IT")]),
min.pct = 0.1, max.pval = 0.05)
subclass_pairs = list(list(c("IT_A", "IT_B"), c("L2/3", "L4")),
list(c("IT_A", "IT_C"), c("L2/3", "L5IT")),
list(c("IT_A", "IT_D"), c("L2/3", "L6IT")),
list(c("IT_B", "IT_C"), c("L4", "L5IT")),
list(c("IT_B", "IT_D"), c("L4", "L6IT")),
list(c("IT_C", "IT_D"), c("L5IT", "L6IT")))
de_results_opossum <- list()
de_results_mouse <- list()
for (pair in subclass_pairs) {
sbcl_1_1 <- pair[[1]][1]
sbcl_1_2 <- pair[[1]][2]
sbcl_2_1 <- pair[[2]][1]
sbcl_2_2 <- pair[[2]][2]
# Perform differential expression analysis for both species
de_results_opossum[[paste(sbcl_1_1, sbcl_1_2, sep = "_vs_")]] <- FindMarkers(obj.opossum.IT, ident.1 = sbcl_1_1, ident.2 = sbcl_1_2, test.use = "wilcox")
de_results_mouse[[paste(sbcl_2_1, sbcl_2_2, sep = "_vs_")]] <- FindMarkers(obj.mouse.IT, ident.1 = sbcl_2_1, ident.2 = sbcl_2_2, test.use = "wilcox")
}
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-100, 100)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-110, 110)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-125, 125)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-115, 115)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-110, 110)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-100, 100)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-100, 100) + ylim(0.5, 1.5)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-100, 100) + xlim(0.5, 1.5)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-100, 100) + xlim(0.5, 2)
print(p)
ggsave("E:/Opossum_Paper/Figure S2/IT_DE_Difference.svg", plot = p)
print(p)
ggsave("E:/Opossum_Paper/Figure 2/IT_DE_Difference.svg", plot = p)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
# Example Usage
p <- PlotPairwiseSubclassGeneCountCDFDiff(de_results_opossum, de_results_mouse,
subclass_pairs,
as.character(colors_list[c("IT_A", "IT_B", "Lamp5", "IT_D", "Vip", "Frem1")]),
min.pct = 0.25,
max.pval = 0.05) + ylim(-100, 100)
print(p)
ggsave("E:/Opossum_Paper/Figure 2/IT_DE_Difference.svg", plot = p)
gc()
library(Seurat)
library(SeuratDisk)
library(SeuratWrappers)
library(monocle3)
library(pheatmap)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
colors_list <- GetColors()
obj.opossum.glutamatergic <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_glutamatergic_processed.rds")
obj.mouse.glutamatergic <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_P38_glutamatergic_processed.rds")
Idents(obj.opossum.glutamatergic) <- "subclass"
obj.opossum.IT <- subset(obj.opossum.glutamatergic, idents = c("IT_A", "IT_B", "IT_C", "IT_D"))
obj.opossum.IT <- NormalizePCA(obj.opossum.IT)
Idents(obj.mouse.glutamatergic) <- "subclass"
obj.mouse.IT <- subset(obj.mouse.glutamatergic, idents = c("L2/3", "L4", "L5IT", "L6IT"))
obj.mouse.IT <- NormalizePCA(obj.mouse.IT)
# Compute DE genes (Mouse)
de_genes_L4 <- FindMarkers(
object = obj.mouse.IT,
ident.1 = "L4",
logfc.threshold = 0.25,  # Adjust as needed
min.pct = 0.1,  # Filter genes expressed in at least 10% of cells
test.use = "wilcox"  # Wilcoxon test
)
# Compute DE genes (Opossum)
de_genes_B <- FindMarkers(
object = obj.opossum.IT,
ident.1 = "IT_B",
logfc.threshold = 0.25,  # Adjust as needed
min.pct = 0.1,  # Filter genes expressed in at least 10% of cells
test.use = "wilcox"  # Wilcoxon test
)
library(EnhancedVolcano)
EnhancedVolcano(de_genes_L4, lab = rownames(de_genes_L4), x = 'avg_log2FC', y = 'p_val_adj')
EnhancedVolcano(de_genes_B, lab = rownames(de_genes_B), x = 'avg_log2FC', y = 'p_val_adj')
L4 <- rownames(de_genes_L4[abs(de_genes_L4$avg_log2FC) > 0.75 & de_genes_L4$pct.1 > 0.25 & de_genes_L4$p_val_adj < 0.05, ])
B <- rownames(de_genes_B[abs(de_genes_B$avg_log2FC) > 0.75 & de_genes_B$pct.1 > 0.25 & de_genes_B$p_val_adj < 0.05, ])
length(setdiff(L4, B)) / length(L4)
L4.diff <- setdiff(L4, B)
B.diff <- setdiff(B, L4)
shared.genes <- intersect(L4, B)
all_genes <- rownames(obj.opossum.IT)[rownames(obj.opossum.IT) %in% rownames(obj.mouse.IT)]
shared_genes_df <- data.frame(gene_id = all_genes,
candidate = ifelse(all_genes %in% shared.genes, 1, 0))
# Perform GO enrichment for IT_A upregulated genes
go_shared_results <- go_enrich(
genes = as.data.frame(shared_genes_df),
organismDb = "Mus.musculus",  # Ensures correct annotation source
silent = TRUE
)
library(GOfuncR)
all_genes <- rownames(obj.opossum.IT)[rownames(obj.opossum.IT) %in% rownames(obj.mouse.IT)]
shared_genes_df <- data.frame(gene_id = all_genes,
candidate = ifelse(all_genes %in% shared.genes, 1, 0))
# Perform GO enrichment for IT_A upregulated genes
go_shared_results <- go_enrich(
genes = as.data.frame(shared_genes_df),
organismDb = "Mus.musculus",  # Ensures correct annotation source
silent = TRUE
)
# View(go_L4_results$results[go_L4_results$results$ontology == "biological_process" & go_L4_results$results$FWER_overrep < 0.05, ])
# View(go_B_results$results[go_B_results$results$ontology == "biological_process" & go_B_results$results$FWER_overrep < 0.05, ])
View(go_shared_results$results[go_shared_results$results$ontology == "biological_process" & go_shared_results$results$FWER_overrep < 0.05, ])
shared.genes
L4 <- rownames(de_genes_L4[abs(de_genes_L4$avg_log2FC) > 0.5 & de_genes_L4$pct.1 > 0.25 & de_genes_L4$p_val_adj < 0.05, ])
B <- rownames(de_genes_B[abs(de_genes_B$avg_log2FC) > 0.5 & de_genes_B$pct.1 > 0.25 & de_genes_B$p_val_adj < 0.05, ])
length(setdiff(L4, B)) / length(L4)
L4.diff <- setdiff(L4, B)
B.diff <- setdiff(B, L4)
shared.genes <- intersect(L4, B)
shared.genes
all_genes <- rownames(obj.opossum.IT)[rownames(obj.opossum.IT) %in% rownames(obj.mouse.IT)]
shared_genes_df <- data.frame(gene_id = all_genes,
candidate = ifelse(all_genes %in% shared.genes, 1, 0))
# Perform GO enrichment for IT_A upregulated genes
go_shared_results <- go_enrich(
genes = as.data.frame(shared_genes_df),
organismDb = "Mus.musculus",  # Ensures correct annotation source
silent = TRUE
)
# View(go_L4_results$results[go_L4_results$results$ontology == "biological_process" & go_L4_results$results$FWER_overrep < 0.05, ])
# View(go_B_results$results[go_B_results$results$ontology == "biological_process" & go_B_results$results$FWER_overrep < 0.05, ])
View(go_shared_results$results[go_shared_results$results$ontology == "biological_process" & go_shared_results$results$FWER_overrep < 0.05, ])
subclass.pairs <- list(L23 = c("L2/3", "IT_A"), L4 = c("L4", "IT_B"), L5IT = c("L5IT", "IT_C"), L6IT = c("L6IT", "IT_D"))
for (pair in subclass.pairs) {print(pair)}
subclass.pairs <- list(L23 = c("L2/3", "IT_A"), L4 = c("L4", "IT_B"), L5IT = c("L5IT", "IT_C"), L6IT = c("L6IT", "IT_D"))
de_genes <- list()
go_shared_results <- list()
for (pair in names(subclass.pairs)) {
mouse.subclass <- subclass.pairs[[pair]][1]
opossum.subclass <- subclass.pairs[[pair]][2]
# Compute DE genes (Mouse)
de_genes_mouse <- FindMarkers(
object = obj.mouse.IT,
ident.1 = mouse.subclass,
logfc.threshold = 0.25,  # Adjust as needed
min.pct = 0.1,  # Filter genes expressed in at least 10% of cells
test.use = "wilcox"  # Wilcoxon test
)
# Compute DE genes (Opossum)
de_genes_opossum <- FindMarkers(
object = obj.opossum.IT,
ident.1 = opossum.subclass,
logfc.threshold = 0.25,  # Adjust as needed
min.pct = 0.1,  # Filter genes expressed in at least 10% of cells
test.use = "wilcox"  # Wilcoxon test
)
de_genes[[pair]][["Mouse"]] <- de_genes_mouse
de_genes[[pair]][["Opossum"]] <- de_genes_opossum
}
for (pair in names(subclass.pairs)) {
# EnhancedVolcano(de_genes_L4, lab = rownames(de_genes_L4), x = 'avg_log2FC', y = 'p_val_adj')
# EnhancedVolcano(de_genes_B, lab = rownames(de_genes_B), x = 'avg_log2FC', y = 'p_val_adj')
de_genes_mouse <- de_genes[[pair]][["Mouse"]]
de_genes_opossum <- de_genes[[pair]][["Opossum"]]
de_genes_mouse <- rownames(de_genes_mouse[abs(de_genes_mouse$avg_log2FC) > 0.5 & de_genes_mouse$pct.1 > 0.25 & de_genes_mouse$p_val_adj < 0.05, ])
de_genes_opossum <- rownames(de_genes_opossum[abs(de_genes_opossum$avg_log2FC) > 0.5 & de_genes_opossum$pct.1 > 0.25 & de_genes_B$p_val_adj < 0.05, ])
# length(setdiff(L4, B)) / length(L4)
# L4.diff <- setdiff(L4, B)
# B.diff <- setdiff(B, L4)
shared.genes <- intersect(de_genes_mouse, de_genes_opossum)
all_genes <- rownames(obj.opossum.IT)[rownames(obj.opossum.IT) %in% rownames(obj.mouse.IT)]
shared_genes_df <- data.frame(gene_id = all_genes,
candidate = ifelse(all_genes %in% shared.genes, 1, 0))
# Perform GO enrichment for IT_A upregulated genes
go_shared_results[[pair]] <- go_enrich(
genes = as.data.frame(shared_genes_df),
organismDb = "Mus.musculus",  # Ensures correct annotation source
silent = TRUE
)
}
go_shared_results
for (pair in names(subclass.pairs)) {
View(go_shared_results[[pair]]$results[go_shared_results[[pair]]$results$ontology == "biological_process" & go_shared_results[[pair]]$results$FWER_overrep < 0.05, ])
}
names(subclass.pairs)
gc()
obj.opossum.IT.Proj <- readRDS("E:/Transcriptomics_V1/Integration/Opossum_Mouse-P38/opossum_v1_it_proj_wgcna.rds")
plot_list <- PlotModulePreservation(
obj.opossum.IT.Proj,
name="IT",
statistics = "summary"
)
library(hdWGCNA)
plot_list <- PlotModulePreservation(
obj.opossum.IT.Proj,
name="IT",
statistics = "summary"
)
print(plot_list)
ModuleRadarPlot(
obj.opossum.IT.Proj,
group.by = 'subclass',
barcodes = obj.opossum.IT.Proj@meta.data %>% rownames(),
axis.label.size=4,
grid.label.size=4
)
plot_list <- PlotModulePreservation(
obj.opossum.IT.Proj,
name="IT",
statistics = "summary"
)
print(plot_list)
plot_list <- PlotModulePreservation(
obj.opossum.IT.Proj,
name="IT",
statistics = "summary"
)
print(plot_list)
plot_list <- PlotModulePreservation(
obj.opossum.IT.Proj,
name="IT",
statistics = "summary"
)
print(plot_list)
plot_list <- PlotModulePreservation(
obj.opossum.IT.Proj,
name="IT",
statistics = "summary"
)
print(plot_list)
```{r, fig.height=3, fig.width=3}
plot_list <- PlotModulePreservation(
obj.opossum.IT.Proj,
name="IT",
statistics = "summary"
)
print(plot_list)
plot_list
ggsave("E:/Opossum_Paper/Figure 2/WGCNA_Module_Preservation.svg", plot = plot_list$Zsummary.pres)
obj.mouse.IT.Proj <- readRDS("E:/Transcriptomics_V1/Integration/Opossum_Mouse-P38/mouse_v1_it_proj_wgcna.rds")
gc()
gc()
obj.mouse.IT <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_it_wgcna.rds")
obj.opossum.IT <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_it_wgcna.rds")
library(hdWGCNA)
shared.genes <- intersect(rownames(obj.mouse.IT), rownames(obj.opossum.IT))
obj.mouse.IT <- obj.mouse.IT[shared.genes,]
obj.opossum.IT <- obj.opossum.IT[shared.genes,]
obj.mouse.IT.Proj <- ProjectModules(
obj.mouse.IT,
seurat_ref = obj.opossum.IT,
group.by.vars = "sample",
wgcna_name_proj = "IT"
)
# compute module hub scores for projected modules:
obj.mouse.IT.Proj <- ModuleExprScore(
obj.mouse.IT.Proj,
n_genes = 25,
method='Seurat'
)
library(patchwork)
# make a featureplot of hub scores for each module
plot_list <- ModuleFeaturePlot(
obj.mouse.IT.Proj,
features='scores',
order="shuffle"
)
# stitch together with patchwork
# png(paste0(fig_dir, 'mouse_featureplot.png'), width=12, height=6, units='in', res=400)
print(wrap_plots(plot_list[c(2, 3, 5:11)], ncol=3))
# dev.off()
ModuleRadarPlot(
obj.mouse.IT.Proj,
group.by = 'subclass',
barcodes = obj.mouse.IT.Proj@meta.data %>% rownames(),
axis.label.size=4,
grid.label.size=4
)
# set dat expr for single-cell dataset:
obj.mouse.IT.Proj <- SetDatExpr(
obj.mouse.IT.Proj,
group_name = c("L2/3", "L4", "L5IT", "L6IT"),
group.by = "subclass",
use_metacells = FALSE
)
# run module preservation function
obj.mouse.IT.Proj <- ModulePreservation(
obj.mouse.IT.Proj,
seurat_ref = obj.opossum.IT,
name="IT",
verbose=3
)
