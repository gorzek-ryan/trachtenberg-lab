DotPlot(obj.opossum.glutamatergic, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(tidyverse)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
obj.opossum.glutamatergic <- readRDS("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_glutamatergic.rds")
obj.opossum.glutamatergic <- ClusterSCT(obj.opossum.glutamatergic, c(1))
PlotClusters(obj.opossum.glutamatergic, group.id = "SCT_snn_res.1")
canon.markers <- list(
class = c("Slc17a6", "Slc17a7", "Sv2b"),
L23 = c("Cux2", "Ccbe1", "Mdga1", "Stard8"),
L4 = c("Whrn", "Rorb"),
L5IT = c("Bcl11b"),
L5NP = c("Nxph1", "Tshz2", "Trhr", "Slc17a8"),
L5PT = c("Bcl6", "Erg", "Reln"),
L6CT = c("Foxp2", "Syt6"),
L6IT = c("Zfp804b", "Cdh9"),
L6b = c("Ctgf", "Inpp4b", "Svil")
)
# look for canonical markers
DefaultAssay(obj.opossum.glutamatergic) <- "RNA"
Idents(obj.opossum.glutamatergic) <- "SCT_snn_res.1"
PlotFeatures(obj.opossum.glutamatergic, canon.markers)
DotPlot(obj.opossum.glutamatergic, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
obj.opossum.glutamatergic <- ClusterSCT(obj.opossum.glutamatergic, c(0.2, 1, 1.5, 2))
PlotClusters(obj.opossum.glutamatergic, group.id = "SCT_snn_res.1")
canon.markers <- list(
class = c("Slc17a6", "Slc17a7", "Sv2b"),
L23 = c("Cux2", "Ccbe1", "Mdga1", "Stard8"),
L4 = c("Whrn", "Rorb"),
L5IT = c("Bcl11b"),
L5NP = c("Nxph1", "Tshz2", "Trhr", "Slc17a8"),
L5PT = c("Bcl6", "Erg", "Reln"),
L6CT = c("Foxp2", "Syt6"),
L6IT = c("Zfp804b", "Cdh9"),
L6b = c("Ctgf", "Inpp4b", "Svil")
)
# look for canonical markers
DefaultAssay(obj.opossum.glutamatergic) <- "RNA"
Idents(obj.opossum.glutamatergic) <- "SCT_snn_res.1"
PlotFeatures(obj.opossum.glutamatergic, canon.markers)
DotPlot(obj.opossum.glutamatergic, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
PlotClusters(obj.opossum.glutamatergic, group.id = "SCT_snn_res.0.2")
obj.opossum.glutamatergic
obj.opossum.glutamatergic[[]]
obj.opossum.glutamatergic <- ClusterSCT(obj.opossum.glutamatergic, c(0.5))
PlotClusters(obj.opossum.glutamatergic, group.id = "SCT_snn_res.0.5")
PlotClusters(obj.opossum.glutamatergic, group.id = "SCT_snn_res.1")
PlotClusters(obj.opossum.glutamatergic, group.id = "SCT_snn_res.1.5")
obj.opossum.glutamatergic$SCT_snn_res.1 <- NULL
obj.opossum.glutamatergic$SCT_snn_res.2 <- NULL
clustree(obj.opossum.glutamatergic, prefix = "SCT_snn_res.")
# identify subclasses at each clustering resolution
# do differential expression for clusters within each subclass
# generate plots of top genes for each
subclass.idx.opossum <- list()
subclass.idx.opossum$SCT_snn_res.0.2$IT_A <- c("1")
subclass.idx.opossum$SCT_snn_res.0.5$IT_A <- c("2", "6")
subclass.idx.opossum$SCT_snn_res.1.5$IT_A <- c("5", "9", "11", "12", "13", "16")
subclass.idx.opossum$SCT_snn_res.0.2$IT_B <- c("2")
subclass.idx.opossum$SCT_snn_res.0.5$IT_B <- c("3", "4", "10")
subclass.idx.opossum$SCT_snn_res.1.5$IT_B <- c("1", "2", "10", "14", "23")
subclass.idx.opossum$SCT_snn_res.0.2$IT_C <- c("4")
subclass.idx.opossum$SCT_snn_res.0.5$IT_C <- c("7", "8")
subclass.idx.opossum$SCT_snn_res.1.5$IT_C <- c("3", "15", "24")
subclass.idx.opossum$SCT_snn_res.0.2$IT_D <- c("5")
subclass.idx.opossum$SCT_snn_res.0.5$IT_D <- c("5")
subclass.idx.opossum$SCT_snn_res.1.5$IT_D <- c("6", "19")
subclass.idx.opossum$SCT_snn_res.0.2$IT_E <- c("7")
subclass.idx.opossum$SCT_snn_res.0.5$IT_E <- c("12")
subclass.idx.opossum$SCT_snn_res.1.5$IT_E <- c("22")
subclass.idx.opossum$SCT_snn_res.0.2$L5PT <- c("6")
subclass.idx.opossum$SCT_snn_res.0.5$L5PT <- c("9")
subclass.idx.opossum$SCT_snn_res.1.5$L5PT <- c("18", "21")
subclass.idx.opossum$SCT_snn_res.0.5$L5NP <- c("11")
subclass.idx.opossum$SCT_snn_res.1.5$L5NP <- c("17")
subclass.idx.opossum$SCT_snn_res.0.2$L6CT <- c("3")
subclass.idx.opossum$SCT_snn_res.0.5$L6CT <- c("1")
subclass.idx.opossum$SCT_snn_res.1.5$L6CT <- c("4", "7", "8", "20")
subclass.idx.opossum$SCT_snn_res.0.5$L6b <- c("13")
subclass.idx.opossum$SCT_snn_res.1.5$L6b <- c("25")
obj.opossum.glutamatergic <- SubclassByIdent(obj.opossum.glutamatergic, subclass.idx.opossum)
# identify subclasses at each clustering resolution
# do differential expression for clusters within each subclass
# generate plots of top genes for each
subclass.idx.opossum <- list()
subclass.idx.opossum$SCT_snn_res.0.2$IT_A <- c("1")
subclass.idx.opossum$SCT_snn_res.0.5$IT_A <- c("2", "6")
subclass.idx.opossum$SCT_snn_res.1.5$IT_A <- c("5", "9", "11", "12", "13", "16")
subclass.idx.opossum$SCT_snn_res.0.2$IT_B <- c("2")
subclass.idx.opossum$SCT_snn_res.0.5$IT_B <- c("3", "4", "10")
subclass.idx.opossum$SCT_snn_res.1.5$IT_B <- c("1", "2", "10", "14", "23")
subclass.idx.opossum$SCT_snn_res.0.2$IT_C <- c("4")
subclass.idx.opossum$SCT_snn_res.0.5$IT_C <- c("7", "8")
subclass.idx.opossum$SCT_snn_res.1.5$IT_C <- c("3", "15", "24")
subclass.idx.opossum$SCT_snn_res.0.2$IT_D <- c("5")
subclass.idx.opossum$SCT_snn_res.0.5$IT_D <- c("5")
subclass.idx.opossum$SCT_snn_res.1.5$IT_D <- c("6", "19")
subclass.idx.opossum$SCT_snn_res.0.2$IT_E <- c("7")
subclass.idx.opossum$SCT_snn_res.0.5$IT_E <- c("12")
subclass.idx.opossum$SCT_snn_res.1.5$IT_E <- c("22")
subclass.idx.opossum$SCT_snn_res.0.2$L5PT <- c("6")
subclass.idx.opossum$SCT_snn_res.0.5$L5PT <- c("9")
subclass.idx.opossum$SCT_snn_res.1.5$L5PT <- c("18", "21")
subclass.idx.opossum$SCT_snn_res.0.5$L5NP <- c("11")
subclass.idx.opossum$SCT_snn_res.1.5$L5NP <- c("17")
subclass.idx.opossum$SCT_snn_res.0.2$L6CT <- c("3")
subclass.idx.opossum$SCT_snn_res.0.5$L6CT <- c("1")
subclass.idx.opossum$SCT_snn_res.1.5$L6CT <- c("4", "7", "8", "20")
subclass.idx.opossum$SCT_snn_res.0.5$L6b <- c("13")
subclass.idx.opossum$SCT_snn_res.1.5$L6b <- c("25")
obj.opossum.glutamatergic <- SubclassByIdent(obj.opossum.glutamatergic, subclass.idx.opossum)
subclass.labels <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5PT", "L6CT")
ident.labels <- c("SCT_snn_res.0.2", "SCT_snn_res.0.5", "SCT_snn_res.1.5")
markers.opossum.glutamatergic <- IdentMarkerDict(obj.opossum.glutamatergic, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/marker_genes/Glutamatergic/markerdict_clusters.rds")
SaveDotPlots(obj.opossum.glutamatergic, markers.opossum.glutamatergic,
subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/", "ENSMODG")
SaveFeaturePlots(obj.opossum.glutamatergic, markers.opossum.glutamatergic,
subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/")
subclass.labels <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5PT", "L6CT")
ident.labels <- c("SCT_snn_res.0.2", "SCT_snn_res.0.5", "SCT_snn_res.1.5")
for (sbcl in subclass.labels) {
for (id in ident.labels) {
p <- PlotIdentGeneCounts(markers.opossum.glutamatergic, sbcl, id)
p <- p + theme(aspect.ratio = 1) # Make plot square
print(p)
}
}
# whole-transcriptome cross-validated classification
subclass.labels <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5PT", "L6CT")
ident.labels <- c("SCT_snn_res.0.2", "SCT_snn_res.0.5", "SCT_snn_res.1.5")
SaveIdentConfusionMatrices(obj.opossum.glutamatergic, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/")
# label subclasses and types
obj.opossum.glutamatergic$subclass <- NA
obj.opossum.glutamatergic$type <- NA
subclass.resolutions <- rev(list(IT_A = 0.5, IT_B = 0.5, IT_C = 0.5, IT_D = 0.5, IT_E = 0.5, L5PT = 2, L5NP = 0.5, L6CT = 2, L6b = 0.5))
obj.opossum.glutamatergic <- LabelCells(obj.opossum.glutamatergic, subclass.resolutions)
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
subclass.labels <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5PT", "L6CT")
ident.labels <- c("type")
subclass.markers.opossum.glutamatergic <- SubclassMarkerDict(obj.opossum.glutamatergic, "subclass",
"E:/Transcriptomics_V1/Opossum/seurat/marker_genes/Glutamatergic/markerdict_subclass.rds")
markers.opossum.glutamatergic <- IdentMarkerDict(obj.opossum.glutamatergic, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/marker_genes/Glutamatergic/markerdict_types.rds")
SaveDotPlots(obj.opossum.glutamatergic, markers.opossum.glutamatergic,
subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/", "ENSMODG")
# label subclasses and types
obj.opossum.glutamatergic$subclass <- NA
obj.opossum.glutamatergic$type <- NA
subclass.resolutions <- rev(list(IT_A = 0.5, IT_B = 0.5, IT_C = 0.5, IT_D = 0.5, IT_E = 0.5, L5PT = 1.5, L5NP = 0.5, L6CT = 1.5, L6b = 0.5))
obj.opossum.glutamatergic <- LabelCells(obj.opossum.glutamatergic, subclass.resolutions)
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
any(is.na(obj.opossum.glutamatergic$subclass)
)
obj.opossum.glutamatergic$subclass[is.na(obj.opossum.glutamatergic$subclass)] <- "NAN"
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
obj.opossum.glutamatergic$subclass[is.na(obj.opossum.glutamatergic$subclass)] <- "L6CT"
obj.opossum.glutamatergic$type[is.na(obj.opossum.glutamatergic$type)] <- "L6CT_3"
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
obj.opossum.glutamatergic$subclass[obj.opossum.glutamatergic$subclass == "NAN"] <- "L6CT"
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.opossum.glutamatergic, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
subclass.labels <- c("IT_A", "IT_B", "IT_C", "IT_D", "L5PT", "L6CT")
ident.labels <- c("type")
subclass.markers.opossum.glutamatergic <- SubclassMarkerDict(obj.opossum.glutamatergic, "subclass",
"E:/Transcriptomics_V1/Opossum/seurat/marker_genes/Glutamatergic/markerdict_subclass.rds")
markers.opossum.glutamatergic <- IdentMarkerDict(obj.opossum.glutamatergic, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/marker_genes/Glutamatergic/markerdict_types.rds")
SaveDotPlots(obj.opossum.glutamatergic, markers.opossum.glutamatergic,
subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/", "ENSMODG")
SaveFeaturePlots(obj.opossum.glutamatergic, markers.opossum.glutamatergic,
subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/")
PlotSubclassGeneCounts(subclass.markers.opossum.glutamatergic, "subclass",
c("IT_A", "IT_B", "IT_C", "IT_D", "IT_E","L5PT", "L5NP", "L6CT", "L6b")) + theme(aspect.ratio = 1)
for (sbcl in subclass.labels) {
for (id in ident.labels) {
p <- PlotIdentGeneCounts(markers.opossum.glutamatergic, sbcl, id)
p <- p + theme(aspect.ratio = 1) # Make plot square
print(p)
}
}
SaveSubclassConfusionMatrices(obj.opossum.glutamatergic, "subclass",
c("IT_A", "IT_B", "IT_C", "IT_D", "IT_E","L5PT", "L5NP", "L6CT", "L6b"),
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/")
SaveIdentConfusionMatrices(obj.opossum.glutamatergic, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Opossum/seurat/cell_types/Glutamatergic/")
saveRDS(obj.opossum.glutamatergic, "E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_glutamatergic_processed.rds")
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
obj.mouse.nonneuronal <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_tasic_nonneuronal.rds")
obj.mouse.nonneuronal <- ClusterSCT(obj.mouse.nonneuronal, c(1, 1.5, 2))
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "sample", label = FALSE, raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "SCT_snn_res.1", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "SCT_snn_res.1.5", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "SCT_snn_res.2", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
canon.markers <- list(
Class  = c("Snap25", "Sv2b", "Gad1"),
Astro = c("Aldh1l1", "Grin2c", "Phkg1"),
Endo = c("Pecam1", "Mecom", "Flt1"),
Micro = c("Cx3cr1", "Arhgap45", "Inpp5d"),
Oligo = c("Enpp6", "Mog", "St18"),
OPC = c("Lhfpl3", "Pdgfra", "Cacng4"),
VLMC = c("Slc6a13", "Slc47a1", "Bnc2")
)
# look for canonical markers
DefaultAssay(obj.mouse.nonneuronal) <- "RNA"
Idents(obj.mouse.nonneuronal) <- "type"
PlotFeatures(obj.mouse.nonneuronal, canon.markers)
DotPlot(obj.mouse.nonneuronal, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
clustree(obj.mouse.nonneuronal, prefix = "SCT_snn_res.")
sort(unique(obj.mouse.nonneuronal$type))
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
library(data.table)
data_path <- "E:/Transcriptomics_v1/Mouse/Tasic/filtered_feature_bc_matrix/"
temp.obj.data <- Read10X(data_path, gene.column = 1)
temp.obj <- CreateSeuratObject(counts = temp.obj.data, project = "Mouse_V1_Tasic")
temp.obj$species <- "Mouse"
smpl <- read.csv(paste(data_path, "sample.csv", sep = ""), header = FALSE)
rownames(smpl) <- colnames(temp.obj)
temp.obj <- AddMetaData(temp.obj, smpl, "sample")
clss <- read.csv(paste(data_path, "class.csv", sep = ""), header = FALSE)
rownames(clss) <- colnames(temp.obj)
temp.obj <- AddMetaData(temp.obj, clss, "class")
subclass <- read.csv(paste(data_path, "subclass.csv", sep = ""), header = FALSE)
rownames(subclass) <- colnames(temp.obj)
temp.obj <- AddMetaData(temp.obj, subclass, "subclass")
type <- read.csv(paste(data_path, "type.csv", sep = ""), header = FALSE)
rownames(type) <- colnames(temp.obj)
temp.obj <- AddMetaData(temp.obj, type, "type")
temp.obj$predicted_doublet <- FALSE
obj.mouse <- temp.obj
VlnPlot(obj.mouse, features = c("nFeature_RNA"), group.by = "sample", raster = FALSE) + NoLegend()
VlnPlot(obj.mouse, features = c("nCount_RNA"), group.by = "sample", raster = FALSE) + NoLegend()
FeatureScatter(obj.mouse, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)
all.genes <- rownames(obj.mouse)
obj.mouse <- NormalizeData(obj.mouse, features = all.genes)
obj.mouse <- FindVariableFeatures(obj.mouse, selection.method = "vst", nfeatures = 3000)
obj.mouse <- ScaleData(obj.mouse, features = all.genes)
obj.mouse <- RunPCA(obj.mouse, features = VariableFeatures(object = obj.mouse))
obj.mouse <- FindNeighbors(obj.mouse, dims = 1:30)
obj.mouse <- FindClusters(obj.mouse, resolution = 1, algorithm = 4, method = "igraph")
obj.mouse <- RunUMAP(obj.mouse, dims = 1:30, method="umap-learn")
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.mouse, reduction = "umap", group.by = "sample", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, "nFeature_RNA", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, "nCount_RNA", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "class", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
sort(unique(obj.mouse$type))
sort(unique(obj.mouse$subclass))
obj.mouse$subclass[obj.mouse$type == "Microglia Siglech"]
obj.mouse$subclass[obj.mouse$type == "OPC Pdgfra Ccnb1"]
obj.mouse$class[obj.mouse$type == "Microglia Siglech"] <- "nonneuronal"
obj.mouse$subclass[obj.mouse$type == "Microglia Siglech"] <- "Microglia"
obj.mouse$subclass[obj.mouse$type == "OPC Pdgfra Ccnb1" | obj.mouse$type == "OPC Pdgfra Grm5"] <- "OPC"
obj.mouse$class[obj.mouse$class == "Endothelial"] <- "nonneuronal"
obj.mouse$class[obj.mouse$class == "Non-Neuronal"] <- "nonneuronal"
obj.mouse$class[obj.mouse$class == "GABAergic"] <- "gabaergic"
obj.mouse$class[obj.mouse$class == "Glutamatergic"] <- "glutamatergic"
Idents(obj.mouse) <- "class"
obj.mouse <- subset(obj.mouse, idents = c("glutamatergic", "gabaergic", "nonneuronal"))
Idents(obj.mouse) <- "subclass"
obj.mouse <- subset(obj.mouse, idents = c("None", "CR", "Macrophage"), invert = TRUE)
obj.mouse$subclass[obj.mouse$subclass == "L2/3 IT"] <- "L2/3"
obj.mouse$subclass[obj.mouse$subclass == "L5 IT"] <- "L5IT"
obj.mouse$subclass[obj.mouse$subclass == "NP"] <- "L5NP"
obj.mouse$subclass[obj.mouse$subclass == "L5 PT"] <- "L5PT"
obj.mouse$subclass[obj.mouse$subclass == "L6 IT"] <- "L6IT"
obj.mouse$subclass[obj.mouse$subclass == "L6 CT"] <- "L6CT"
obj.mouse$subclass[obj.mouse$subclass == "Oligo"] <- "OD"
obj.mouse$subclass[obj.mouse$subclass == "Microglia"] <- "Micro"
LETTERS702 <- c(LETTERS, sapply(LETTERS, function(x) paste0(x, LETTERS)))
meta.data <- obj.mouse[[]]
df <- meta.data[,c("subclass", "type")]
df_renamed <- meta.data[,c("subclass", "type")]
# Define the mapping list
mapping <- c("L2/3 IT" = "L2/3", "L4 IT" = "L4", "L5 IT" = "L5IT", "NP" = "L5NP", "L5 PT" = "L5PT", "L6 IT" = "L6IT",
"L6 CT" = "L6CT", "Oligo" = "OD", "Microglia" = "Micro")
# Function to rename type values within each subclass
rename_types <- function(data) {
data %>%
group_by(subclass) %>%
mutate(
type = factor(type),
type_rank = as.numeric(factor(type, levels = names(sort(table(type), decreasing = TRUE)))),
type_new = paste0(subclass, "_", LETTERS[type_rank])
) %>%
select(-type_rank) %>%
ungroup()
}
# Apply the function
for (sbcl in unique(df$subclass)) {
df_out <- rename_types(df[df$subclass == sbcl,])
df_renamed$type_new[df$subclass == sbcl] <- df_out$type_new
}
obj.mouse$type <- df_renamed$type_new
obj.mouse$type[obj.mouse$type == "Astro_A"] <- "Astro"
obj.mouse$type[obj.mouse$type == "L4_A"] <- "L4"
obj.mouse$type[obj.mouse$type == "Astro_A"] <- "Astro"
obj.mouse$type[obj.mouse$type == "Meis2_A"] <- "Meis2"
obj.mouse$type[obj.mouse$type == "Micro_A"] <- "Micro"
obj.mouse$type[obj.mouse$type == "SMC_A"] <- "SMC"
all.genes <- rownames(obj.mouse)
obj.mouse <- NormalizeData(obj.mouse, features = all.genes)
obj.mouse <- FindVariableFeatures(obj.mouse, selection.method = "vst", nfeatures = 3000)
obj.mouse <- ScaleData(obj.mouse, features = all.genes)
obj.mouse <- RunPCA(obj.mouse, features = VariableFeatures(object = obj.mouse))
obj.mouse <- FindNeighbors(obj.mouse, dims = 1:30)
obj.mouse <- FindClusters(obj.mouse, resolution = 1, algorithm = 4, method = "igraph")
obj.mouse <- RunUMAP(obj.mouse, dims = 1:30, method="umap-learn")
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, "nFeature_RNA", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, "nCount_RNA", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "class", raster = FALSE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, reduction = "umap", features = c("Gad2"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, reduction = "umap", features = c("Cux2"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, reduction = "umap", features = c("Rorb"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, reduction = "umap", features = c("Deptor"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, reduction = "umap", features = c("Foxp2"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.mouse, reduction = "umap", features = c("Tshz2"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
Idents(obj.mouse) <- "class"
obj.mouse.nonneuronal <- subset(obj.mouse, idents = "nonneuronal")
saveRDS(obj.mouse.nonneuronal, "E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_tasic_nonneuronal.rds")
gc()
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
obj.mouse.nonneuronal <- readRDS("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_tasic_nonneuronal.rds")
obj.mouse.nonneuronal <- ClusterSCT(obj.mouse.nonneuronal, c(1, 1.5, 2))
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "sample", label = FALSE, raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "subclass", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "type", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "SCT_snn_res.1", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "SCT_snn_res.1.5", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.mouse.nonneuronal, reduction = "umap", group.by = "SCT_snn_res.2", label = TRUE, raster = FALSE, shuffle = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
canon.markers <- list(
Class  = c("Snap25", "Sv2b", "Gad1"),
Astro = c("Aldh1l1", "Grin2c", "Phkg1"),
Endo = c("Pecam1", "Mecom", "Flt1"),
Micro = c("Cx3cr1", "Arhgap45", "Inpp5d"),
Oligo = c("Enpp6", "Mog", "St18"),
OPC = c("Lhfpl3", "Pdgfra", "Cacng4"),
VLMC = c("Slc6a13", "Slc47a1", "Bnc2")
)
# look for canonical markers
DefaultAssay(obj.mouse.nonneuronal) <- "RNA"
Idents(obj.mouse.nonneuronal) <- "type"
PlotFeatures(obj.mouse.nonneuronal, canon.markers)
DotPlot(obj.mouse.nonneuronal, features = canon.markers, cols = c("lightgrey", "red"), scale = FALSE) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.25)) +
theme(panel.background = element_rect(fill = "white", color = NA), plot.background = element_rect(fill = "white", color = NA)) + NoLegend()
clustree(obj.mouse.nonneuronal, prefix = "SCT_snn_res.")
sort(unique(obj.mouse.nonneuronal$type))
# identify subclasses at each clustering resolution
# do differential expression for clusters within each subclass
# generate plots of top genes for each
subclass.idx.mouse <- list()
subclass.idx.mouse$type$Astro <- c("Astro")
subclass.idx.mouse$type$Endo <- c("Endo_A", "Endo_B")
subclass.idx.mouse$type$Micro <- c("Micro")
subclass.idx.mouse$type$OD <- c("OD_A", "OD_B", "OD_C")
subclass.idx.mouse$type$OPC <- c("OPC_A", "OPC_B")
subclass.idx.mouse$type$VLMC <- c("VLMC_A", "VLMC_B", "VLMC_C", "VLMC_D")
subclass.idx.mouse$type$SMC <- c("SMC")
subclass.idx.mouse$type$Peri <- c("Peri")
obj.mouse.nonneuronal <- SubclassByIdent(obj.mouse.nonneuronal, subclass.idx.mouse)
obj.mouse.nonneuronal$type[obj.mouse.nonneuronal$type == "Peri_A"] <- "Peri"
# identify subclasses at each clustering resolution
# do differential expression for clusters within each subclass
# generate plots of top genes for each
subclass.idx.mouse <- list()
subclass.idx.mouse$type$Astro <- c("Astro")
subclass.idx.mouse$type$Endo <- c("Endo_A", "Endo_B")
subclass.idx.mouse$type$Micro <- c("Micro")
subclass.idx.mouse$type$OD <- c("OD_A", "OD_B", "OD_C")
subclass.idx.mouse$type$OPC <- c("OPC_A", "OPC_B")
subclass.idx.mouse$type$VLMC <- c("VLMC_A", "VLMC_B", "VLMC_C", "VLMC_D")
subclass.idx.mouse$type$SMC <- c("SMC")
subclass.idx.mouse$type$Peri <- c("Peri")
obj.mouse.nonneuronal <- SubclassByIdent(obj.mouse.nonneuronal, subclass.idx.mouse)
subclass.labels <- c("Endo", "OD", "OPC", "VLMC")
ident.labels <- c("type")
subclass.markers.mouse.nonneuronal <- SubclassMarkerDict(obj.mouse.nonneuronal, "subclass",
"E:/Transcriptomics_V1/Mouse/seurat/marker_genes/Nonneuronal/Tasic/markerdict_subclass.rds")
markers.mouse.nonneuronal <- IdentMarkerDict(obj.mouse.nonneuronal, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Mouse/seurat/marker_genes/Nonneuronal/Tasic/markerdict_types.rds")
SaveDotPlots(obj.mouse.nonneuronal, markers.mouse.nonneuronal,
subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Mouse/seurat/cell_types/Nonneuronal/Tasic/", "ENSMUSG")
SaveFeaturePlots(obj.mouse.nonneuronal, markers.mouse.nonneuronal,
subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Mouse/seurat/cell_types/Nonneuronal/Tasic/")
PlotSubclassGeneCounts(subclass.markers.mouse.nonneuronal, "subclass",
c("Astro", "Endo", "Micro", "OD", "OPC", "VLMC", "SMC", "Peri")) + theme(aspect.ratio = 1)
for (sbcl in subclass.labels) {
for (id in ident.labels) {
p <- PlotIdentGeneCounts(markers.mouse.nonneuronal, sbcl, id)
p <- p + theme(aspect.ratio = 1) # Make plot square
print(p)
}
}
SaveSubclassConfusionMatrices(obj.mouse.nonneuronal, "subclass",
c("Astro", "Endo", "Micro", "OD", "OPC", "VLMC", "SMC", "Peri"),
"E:/Transcriptomics_V1/Mouse/seurat/cell_types/Nonneuronal/Tasic/")
SaveIdentConfusionMatrices(obj.mouse.nonneuronal, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Mouse/seurat/cell_types/Nonneuronal/Tasic/")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
SaveIdentConfusionMatrices(obj.mouse.nonneuronal, subclass.labels, ident.labels,
"E:/Transcriptomics_V1/Mouse/seurat/cell_types/Nonneuronal/Tasic/")
A
validation_pred
validation_prediction
valid_predlabels
saveRDS(obj.mouse.nonneuronal, "E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_tasic_nonneuronal_processed.rds")
library(Seurat)
library(SeuratDisk)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(patchwork)
library(dplyr)
library(data.table)
library(clustree)
library(reshape2)
library(tidyr)
library(gridExtra)
library(stringr)
library(plyr)
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/tools/seurat_integration_functions.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/xgboost_train.R")
source("C:/Ryan/GitHub/trachtenberg-lab/transcriptomics/xgboost/plottingFxns.R")
classes <- c("Glutamatergic", "GABAergic", "Nonneuronal")
objs.mouse <- c()
objs.opossum <- c()
objs.i.mouse <- c()
objs.i.opossum <- c()
objs.m.mouse <- c()
objs.m.opossum <- c()
for (cl in classes) {
obj.opossum <- readRDS(paste0("E:/Transcriptomics_V1/Opossum/seurat/opossum_v1_", tolower(cl), "_processed.rds"))
obj.mouse.P38 <- readRDS(paste0("E:/Transcriptomics_V1/Mouse/seurat/mouse_v1_P38_", tolower(cl), "_processed.rds"))
objs <- list(obj.opossum, obj.mouse.P38)
objs.mouse <- append(objs.mouse, objs[[2]])
objs.opossum <- append(objs.opossum, objs[[1]])
}
obj.mouse <- merge(objs.mouse[[1]], y = c(objs.mouse[[2]], objs.mouse[[3]]))
obj.opossum <- merge(objs.opossum[[1]], y = c(objs.opossum[[2]], objs.opossum[[3]]))
obj.integrated <- IntegrateObjects(obj.mouse, obj.opossum, resolutions = c(1, 2), nfeatures = 3000, subsample = TRUE)
