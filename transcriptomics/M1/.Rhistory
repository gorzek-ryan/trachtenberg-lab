})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 1000)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.3.5", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 3000)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 3000)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.3.5", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 500)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 500)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.3.5", raster = FALSE) + xlim(-12, 12) + ylim(-12, 12) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Sst")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Pvalb")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.0.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.1", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.1.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.0.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.1", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.1.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", raster = FALSE) + + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.0.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.1", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.1.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
# PV resolution = 4
obj.opossum.gabaergic.pv <- subset(obj.opossum.gabaergic, subset = RNA_snn_res.4 == c("1", "2", "6", "8", "9", "13", "14", "17", "18", "20", "22", "23", "26", "30", "31", "32", "33", "35", "38"))
Idents(obj.opossum.gabaergic.pv) <- "RNA_snn_res.4"
pv.markers <- FindAllMarkers(obj.opossum.gabaergic.pv, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = "roc")
pv.markers.top <- pv.markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC)
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red"))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
pv.markers.top <- pv.markers %>%
group_by(cluster) %>%
slice_max(n = 5, order_by = avg_log2FC)
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red"))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.4", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
# PV resolution = 3
obj.opossum.gabaergic.pv <- subset(obj.opossum.gabaergic, subset = RNA_snn_res.3 == c("1", "2", "3", "5", "6", "7", "10", "14", "16", "20", "27"))
Idents(obj.opossum.gabaergic.pv) <- "RNA_snn_res.3"
pv.markers <- FindAllMarkers(obj.opossum.gabaergic.pv, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = "roc")
pv.markers.top <- pv.markers %>%
group_by(cluster) %>%
slice_max(n = 5, order_by = avg_log2FC)
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 8))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 8))
pv.markers.top <- pv.markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC)
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.3", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
# PV resolution = 2.5
obj.opossum.gabaergic.pv <- subset(obj.opossum.gabaergic, subset = RNA_snn_res.2.5 == c("2", "4", "6", "7", "8", "9", "13", "16", "17", "18", "19", "25"))
Idents(obj.opossum.gabaergic.pv) <- "RNA_snn_res.2.5"
pv.markers <- FindAllMarkers(obj.opossum.gabaergic.pv, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = "roc")
pv.markers.top <- pv.markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC)
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2.5", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
# PV resolution = 2
obj.opossum.gabaergic.pv <- subset(obj.opossum.gabaergic, subset = RNA_snn_res.2 == c("3", "4", "5", "7", "9", "10", "11", "15", "16", "18", "23"))
Idents(obj.opossum.gabaergic.pv) <- "RNA_snn_res.2"
pv.markers <- FindAllMarkers(obj.opossum.gabaergic.pv, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = "roc")
pv.markers.top <- pv.markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC)
DimPlot(obj.opossum.gabaergic, reduction = "umap", group.by="RNA_snn_res.2", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DoHeatmap(object = obj.opossum.gabaergic.pv, pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(obj.opossum.gabaergic.pv, assays = "RNA", return.seurat = TRUE, features = pv.markers.top$gene)
DoHeatmap(expr, features = pv.markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
obj.opossum.gabaergic.pv <- subset(obj.opossum.gabaergic, subset = RNA_snn_res.2 == c("3", "4", "5", "7", "9", "10", "11", "15", "16", "18", "23"))
SaveH5Seurat(obj.opossum.gabaergic.pv, "E:/Opossum_M1/seurat/opossum_m1_gabaergic_pv.h5seurat", overwrite = TRUE, verbose = TRUE)
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(SeuratDisk)
obj.mouse <- LoadH5Seurat("E:/Mouse_M1/seurat/mouse_m1_gabaergic_pv.h5seurat")
obj.mouse[["dataset"]] <- "Mouse_M1"
obj.opossum <- LoadH5Seurat("E:/Opossum_M1/seurat/opossum_m1_gabaergic_pv.h5seurat")
obj.opossum[["dataset"]] <- "Opossum_M1"
obj.mouse <- obj.mouse[, sample(colnames(obj.mouse), size = ncol(obj.opossum), replace = FALSE)]
common.features <- intersect(rownames(obj.mouse), rownames(obj.opossum))
obj.combined <- merge(obj.mouse[common.features,], y = obj.opossum[common.features,])
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 1000)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 1000)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 3000)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 3000)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 5000)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 5000)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
pv.markers
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 500)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 500)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
tail(pv.markers, n = 50)
tail(pv.markers, n = 500)
tail(pv.markers, n = 200)
DimPlot(integ.combined, reduction = "umap", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
integ.combined <- FindClusters(integ.combined, resolution = 2, algorithm = 4, method = "igraph")
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
integ.combined <- FindNeighbors(integ.combined, dims = 1:30)
integ.combined <- FindClusters(integ.combined, resolution = 2, algorithm = 4, method = "igraph")
DimPlot(integ.combined, reduction = "umap", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
# resolution = 2
markers <- FindAllMarkers(integ.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = "roc")
markers.top <- markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC)
DimPlot(integ.combined, reduction = "umap", group.by="RNA_snn_res.2", label = TRUE, raster = FALSE) + NoLegend() + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DoHeatmap(object = integ.combined, markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(integ.combined, assays = "RNA", return.seurat = TRUE, features = markers.top$gene)
DoHeatmap(expr, features = markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
# resolution = 2
markers <- FindAllMarkers(integ.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = "roc")
markers.top <- markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC)
DimPlot(integ.combined, reduction = "umap", group.by="RNA_snn_res.2", label = TRUE, raster = FALSE) + NoLegend() + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DoHeatmap(object = integ.combined, markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(integ.combined, assays = "integrated", return.seurat = TRUE, features = markers.top$gene)
DoHeatmap(expr, features = markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
DimPlot(integ.combined, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DoHeatmap(object = integ.combined, markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(integ.combined, assays = "integrated", return.seurat = TRUE, features = markers.top$gene)
DoHeatmap(expr, features = markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 2000)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
integ.combined <- FindNeighbors(integ.combined, dims = 1:30)
integ.combined <- FindClusters(integ.combined, resolution = 2, algorithm = 4, method = "igraph")
DimPlot(integ.combined, reduction = "umap", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list <- lapply(X = obj.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 1000)
})
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 1000)
integ.anchors <- FindIntegrationAnchors(object.list = obj.list, anchor.features = features)
integ.combined <- IntegrateData(anchorset = integ.anchors)
DefaultAssay(integ.combined) <- "integrated"
integ.combined <- ScaleData(integ.combined, verbose = FALSE)
integ.combined <- RunPCA(integ.combined, verbose = FALSE)
integ.combined <- RunUMAP(integ.combined, dims = 1:30)
integ.combined <- FindNeighbors(integ.combined, dims = 1:30)
integ.combined <- FindClusters(integ.combined, resolution = 2, algorithm = 4, method = "igraph")
DimPlot(integ.combined, reduction = "umap", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", group.by = "dataset", raster = FALSE) + xlim(-15, 15) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "cluster_label", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DimPlot(integ.combined, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", raster = FALSE) + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
# resolution = 2
markers <- FindAllMarkers(integ.combined, only.pos = TRUE, min.pct = 0.25, logfc.threshold = 0.25, test.use = "roc")
markers.top <- markers %>%
group_by(cluster) %>%
slice_max(n = 10, order_by = avg_log2FC)
DimPlot(integ.combined, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-10, 10) + ylim(-10, 10) + coord_equal()
DoHeatmap(object = integ.combined, markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
expr <- AverageExpression(integ.combined, assays = "integrated", return.seurat = TRUE, features = markers.top$gene)
DoHeatmap(expr, features = markers.top$gene) + scale_fill_gradientn(colors = c("blue", "white", "red")) + theme(text = element_text(size = 6))
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(cowplot)
library(dplyr)
library(SeuratDisk)
obj.mouse <- LoadH5Seurat("E:/Mouse_M1/seurat/mouse_m1_gabaergic.h5seurat")
obj.mouse[["dataset"]] <- "Mouse_M1"
obj.opossum <- LoadH5Seurat("E:/Opossum_M1/seurat/opossum_m1_gabaergic.h5seurat")
obj.opossum[["dataset"]] <- "Opossum_M1"
obj.mouse <- obj.mouse[, sample(colnames(obj.mouse), size = ncol(obj.opossum), replace = FALSE)]
common.features <- intersect(rownames(obj.mouse), rownames(obj.opossum))
obj.combined <- merge(obj.mouse[common.features,], y = obj.opossum[common.features,])
obj.list <- SplitObject(obj.combined, split.by = "dataset")
VlnPlot(obj.combined, features = c("nCount_RNA"), split.by = "dataset")
obj.list[["Mouse_M1"]] <- SCTransform(obj.list[["Mouse_M1"]], vst.flavor = "v2", verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindNeighbors(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindClusters(resolution = 1, algorithm = 4, method = "igraph")
DimPlot(obj.list[["Mouse_M1"]], label = TRUE, repel = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
obj.list[["Opossum_M1"]] <- SCTransform(obj.list[["Opossum_M1"]], vst.flavor = "v2", verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindNeighbors(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindClusters(resolution = 1, algorithm = 4, method = "igraph")
DimPlot(obj.list[["Opossum_M1"]], label = TRUE, repel = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 5000)
obj.list <- PrepSCTIntegration(object.list = obj.list, anchor.features = features)
anchors <- FindIntegrationAnchors(object.list = obj.list, normalization.method = "SCT", anchor.features = features)
obj.combined.sct <- IntegrateData(anchorset = anchors, normalization.method = "SCT")
obj.combined.sct <- RunPCA(obj.combined.sct, verbose = FALSE)
obj.combined.sct <- RunUMAP(obj.combined.sct, reduction = "pca", dims = 1:30, verbose = FALSE)
obj.combined.sct <- FindNeighbors(obj.combined.sct, reduction = "pca", dims = 1:30)
obj.combined.sct <- FindClusters(obj.combined.sct, resolution = 1, algorithm = 4, method = "igraph")
DimPlot(obj.combined.sct, reduction = "umap", label = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset") + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "cluster_label", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.2", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "subclass", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
Idents(obj.combined.sct) <- "subclass"
DotPlot(obj.combined.sct, features = cholinergic.markers, cols = c("blue", "red"), dot.scale = 8, split.by = "dataset") +
RotatedAxis()
mq <- MapQuery(anchors, query = obj.list[["Opossum_M1"]], reference = obj.list[["Mouse_M1"]], list(subclass = "subclass"))
mq <- MapQuery(anchors, query = obj.list[["Opossum_M1"]], reference = obj.combined.sct, list(subclass = "subclass"))
anchors
obj.list[["Opossum_M1"]]
obj.list
mq <- MapQuery(anchors, query = obj.list[["Opossum_M1"]], reference = obj.list[["Mouse_M1"]], list(subclass = "subclass"), reference.reduction = "pca", reduction.model = "umap")
mq <- MapQuery(anchors, query = obj.list[["Opossum_M1"]], reference = obj.list[["Mouse_M1"]], list(subclass = "subclass"), reference.reduction = "pca", reduction.model = "umap")
DimPlot(obj.combined.sct, reduction = "umap", label = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset") + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "cluster_label", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.1.5", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "subclass", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
mq <- MapQuery(anchors, query = obj.list[["Opossum_M1"]], reference = obj.list[["Mouse_M1"]], list(subclass = "subclass"), reference.reduction = "pca", reduction.model = "umap")
anchors
obj.list[["Opossum_M1"]]
obj.list[["Opossum_M1"]][["RNA"]]
obj.list[["Opossum_M1"]]["RNA"]
pancreas.query <- TransferData(anchorset = anchors, reference = obj.list[["Mouse_M1"]], query = obj.list[["Opossum_M1"]],
refdata = list(subclass = "subclass"))
pancreas.query <- TransferData(anchorset = anchors, reference = obj.list[["Mouse_M1"]], query = obj.list[["Opossum_M1"]],
refdata = list(subclass = "subclass"), weight.reduction = "pca")
DefaultAssay(obj.combined.sct) <- "integrated"
obj.combined.sctr
obj.combined.sct
pancreas.query <- TransferData(anchorset = anchors, reference = obj.combined.sct, query = obj.list[["Opossum_M1"]],
refdata = list(subclass = "subclass"), weight.reduction = "pca")
obj.combined.sct
obj.combined.sct[[]]
Idents(obj.combined.sct) <- "RNA_snn_res.1.5"
FindConservedMarkers(obj.combined.sct, ident.1 = 12, ident.2 = 4, grouping.var = "dataset")
BiocManager::install('multtest')
install.packages('metap')
install.packages("metap")
Idents(obj.combined.sct) <- "RNA_snn_res.1.5"
FindConservedMarkers(obj.combined.sct, ident.1 = 12, ident.2 = 4, grouping.var = "dataset")
DimPlot(obj.combined.sct, reduction = "umap", label = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset") + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "cluster_label", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.1.5", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "subclass", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
obj.combined.sct[[]]
DimPlot(obj.combined.sct, reduction = "umap", group.by = "integrated_snn_res.1", label = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset") + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "cluster_label", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.1.5", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "subclass", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
Idents(obj.combined.sct) <- "integrated_snn_res.1"
FindConservedMarkers(obj.combined.sct, ident.1 = 3, grouping.var = "dataset")
DimPlot(obj.combined.sct, reduction = "umap", group.by = "integrated_snn_res.1", label = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset") + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "cluster_label", label = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.1.5", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "subclass", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "integrated_snn_res.1", label = TRUE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset") + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "cluster_label", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "RNA_snn_res.1.5", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", split.by = "dataset", group.by = "subclass", label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
Idents(obj.combined.sct) <- "integrated_snn_res.1"
FindConservedMarkers(obj.combined.sct, ident.1 = 21, grouping.var = "dataset")
Idents(obj.combined.sct) <- "integrated_snn_res.1"
markers <- FindConservedMarkers(obj.combined.sct, ident.1 = 21, grouping.var = "dataset")
View(markers)
View(markers)
Idents(obj.combined.sct) <- "integrated_snn_res.1"
markers <- FindConservedMarkers(obj.combined.sct, ident.1 = 8, grouping.var = "dataset")
View(markers)
View(markers)
FeaturePlot(obj.combined.sct, "Ptprk")
FeaturePlot(obj.combined.sct, "Ptprk") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Ptprk") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Ptprk", split.by = "dataset") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Egfem1") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
rownames(obj.combined.sct)
FeaturePlot(obj.combined.sct, "Gabrg1") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Gabrg1", split.by = "dataset") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Vipr2") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Vipr2", split.by = "dataset") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Etv1") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.combined.sct, "Etv1", split.by = "dataset") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DefaultAssay(obj.combined.sct) <- "RNA"
Idents(obj.combined.sct) <- "integrated_snn_res.1"
markers <- FindConservedMarkers(obj.combined.sct, ident.1 = 21, grouping.var = "dataset")
View(markers)
View(markers)
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
obj.mouse.gabaergic <- LoadH5Seurat("E:/Mouse_M1/seurat/mouse_m1_gabaergic.h5Seurat")
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Sst")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Pvalb")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Vip")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Lamp5")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Sncg")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Meis2")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Chat")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Slc18a3")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse.gabaergic, reduction = "umap", features = c("Slc5a7")) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Human_M1/Mouse_M1_10xV3_Matrix.RDS")
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Human_M1/Human_M1_10xV3_Matrix.RDS")
meta_tb <- arrow::read_feather("E:/Human_M1/Human_M1_10xV3_Metadata.feather")
meta_df <- as.data.frame(meta_tb)
row.names(meta_df) <- meta_df[, "sample_id"]
obj.human <- CreateSeuratObject(counts = matrix, meta.data = meta_df)
rm(list = c("matrix", "meta_df", "meta_tb"))
obj.human[[]]
obj.human <- AddMetaData(obj.human, metadata = unlist(rep(list("Human_M1"), ncol(obj.human))), col.name = "dataset")
Idents(object = obj.human) <- obj.human[["dataset"]]
obj.human[["percent.mt"]] <- PercentageFeatureSet(obj.human, pattern = "^mt-")
VlnPlot(obj.human, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
obj.human <- AddMetaData(obj.human, metadata = unlist(rep(list("Human_M1"), ncol(obj.human))), col.name = "dataset")
Idents(object = obj.human) <- obj.human[["dataset"]]
obj.human[["percent.mt"]] <- PercentageFeatureSet(obj.human, pattern = "^MT-")
VlnPlot(obj.human, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
obj.human <- NormalizeData(obj.human, normalization.method = "LogNormalize", scale.factor = 10000)
obj.human <- FindVariableFeatures(obj.human, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.human)
obj.human <- ScaleData(obj.human, features = all.genes)
obj.human <- RunPCA(obj.human, features = VariableFeatures(object = obj.human))
ElbowPlot(obj.human, ndims = 50)
obj.human <- FindNeighbors(obj.human, dims = 1:30)
obj.human <- FindClusters(obj.human, resolution = 1, algorithm = 4, method = "igraph")
obj.human <- RunUMAP(obj.human, dims = 1:30, method="umap-learn")
SaveH5Seurat(obj.human, "E:/Human_M1/seurat/human_m1_all.h5seurat", overwrite = TRUE, verbose = TRUE)
Idents(obj.human) <- "RNA_snn_res.1"
DimPlot(obj.human, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.human, reduction = "umap", group.by = "subclass_label", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
Idents(obj.human) <- "level1_label"
cells.glutamatergic <- WhichCells(obj.human, ident = "Glutamatergic")
obj.human$class <- ifelse(colnames(obj.human) %in% cells.glutamatergic, "glutamatergic", "ambiguous")
cells.gabaergic <- WhichCells(obj.human, ident = "GABAergic")
obj.human$class[cells.gabaergic] <- "gabaergic"
cells.nonneuronal <- WhichCells(obj.human, ident = "Non-neuronal")
obj.human$class[cells.nonneuronal] <- "nonneuronal"
# obj.human.glutamatergic <- subset(obj.human, subset = class == "glutamatergic")
# SaveH5Seurat(obj.human.glutamatergic, "E:/Human_M1/seurat/human_m1_glutamatergic.h5seurat", overwrite = TRUE, verbose = TRUE)
obj.human.gabaergic <- subset(obj.human, subset = class == "gabaergic")
SaveH5Seurat(obj.human.gabaergic, "E:/Human_M1/seurat/human_m1_gabaergic.h5seurat", overwrite = TRUE, verbose = TRUE)
