names_to = "cell.identity",
values_to = "fraction"
)
both.counts$species <- factor(both.counts$species, levels = c("Opossum", "Mouse"))
class.counts <- both.counts[both.counts$cell.identity %in% c("Pvalb", "Sst", "Vip", "Sncg", "Lamp5"), ]
ggplot(class.counts, aes(x = factor(cell.identity, level = c("Pvalb", "Sst", "Vip", "Lamp5", "Sncg")), y = fraction, fill = species)) +
geom_bar(stat = "summary", fun = "median", position = position_dodge(width = 0.8), width = 0.75) +
geom_point(colour = "black", position = position_dodge(width = 0.8), size = 1) +
scale_x_discrete(labels = c("Pvalb", "Sst", "Vip", "Lamp5", "Sncg")) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75), expand = c(0, 0), limits = c(0, 0.751)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
theme_classic() + theme(axis.text = element_text(color = "black"), legend.text = element_text(size = 10)) +
labs(x = NULL, y = "Fraction of GABAergic Cells", fill = NULL) +
scale_fill_manual("legend", values = c("Opossum" = "#c692b8", "Mouse" = "#aaaaaa"))
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/MO_GABAergic_Subclass_Proportion.svg", plot=mo_gabaergic, width=4, height=3, dpi=500)
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/MO_GABAergic_Subclass_Proportion.png", plot=mo_gabaergic, width=4, height=3, dpi=500)
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
obj.opossum.gabaergic <- LoadH5Seurat("E:/Opossum_M1/seurat/opossum_m1_gabaergic_raw.h5Seurat")
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(cowplot)
library(dplyr)
library(SeuratDisk)
library(lisi)
obj.mouse <- LoadH5Seurat("E:/Mouse_M1/seurat/mouse_m1_glutamatergic.h5seurat")
obj.mouse$dataset <- "Mouse_M1"
obj.treeshrew <- LoadH5Seurat("E:/Tree_Shrew_M1/seurat/treeshrew_m1_glutamatergic_sct.h5seurat")
DefaultAssay(obj.treeshrew) <- "RNA"
obj.treeshrew$dataset <- "Tree_Shrew_M1"
common.features <- intersect(rownames(obj.mouse), rownames(obj.treeshrew))
obj.combined <- merge(obj.mouse[common.features,], y = obj.treeshrew[common.features,])
obj.list <- SplitObject(obj.combined, split.by = "dataset")
obj.list[["Mouse_M1"]] <- SCTransform(obj.list[["Mouse_M1"]], vst.flavor = "v2", verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindNeighbors(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindClusters(resolution = 1, algorithm = 4, method = "igraph")
DimPlot(obj.list[["Mouse_M1"]], label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.list[["Mouse_M1"]], label = TRUE, group.by = "subclass") + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
obj.list[["Tree_Shrew_M1"]] <- SCTransform(obj.list[["Tree_Shrew_M1"]], vst.flavor = "v2", verbose = FALSE) %>%
RunPCA(npcs = 30, verbose = FALSE) %>%
RunUMAP(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindNeighbors(reduction = "pca", dims = 1:30, verbose = FALSE) %>%
FindClusters(resolution = 1, algorithm = 4, method = "igraph")
DimPlot(obj.list[["Tree_Shrew_M1"]], label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
features <- SelectIntegrationFeatures(object.list = obj.list, nfeatures = 5000)
obj.list <- PrepSCTIntegration(object.list = obj.list, anchor.features = features)
anchors <- FindIntegrationAnchors(object.list = obj.list, normalization.method = "SCT", anchor.features = features)
obj.combined.sct <- IntegrateData(anchorset = anchors, normalization.method = "SCT", features.to.integrate = common.features)
rm(obj.mouse)
rm(obj.treeshrew)
gc()
gc()
obj.combined.sct <- IntegrateData(anchorset = anchors, normalization.method = "SCT", features.to.integrate = common.features)
rm(*tmp*)
View(`*tmp*`)
DimPlot(obj.list[["Mouse_M1"]], label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.list[["Tree_Shrew_M1"]], label = TRUE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
rm(obj.combined)
rm(obj.list)
gc()
obj.combined.sct <- IntegrateData(anchorset = anchors, normalization.method = "SCT", features.to.integrate = common.features)
gc()
obj.combined.sct <- IntegrateData(anchorset = anchors, normalization.method = "SCT") # , features.to.integrate = common.features
obj.combined.sct <- RunPCA(obj.combined.sct, verbose = FALSE)
obj.combined.sct <- RunUMAP(obj.combined.sct, reduction = "pca", dims = 1:30, verbose = FALSE)
obj.combined.sct <- FindNeighbors(obj.combined.sct, reduction = "pca", dims = 1:30)
obj.combined.sct <- FindClusters(obj.combined.sct, resolution = 1, algorithm = 4, method = "igraph")
library(tidyverse)
library(dplyr)
human.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Human_Subclass_Sample.csv")
human.counts <- human.counts[-1, ]
rownames(human.counts) <- human.counts$X
human.counts <- human.counts[, -1]
human.counts$species <- "Human"
human.counts$Stac <- 0
human.counts$Frem1 <- 0
human.counts$Meis2 <- 0
human.counts$Peri <- 0
human.counts$SMC <- 0
human.counts$Pvalb <- human.counts$Pvalb + human.counts$Chandelier
human.counts$Lamp5 <- human.counts$Lamp5 + human.counts$Lamp5_Lhx6
human.counts$Sst <- human.counts$Sst + human.counts$Sst.Chodl
human.counts$Glutamatergic <- rowSums(human.counts[, c("L2.3.IT", "L4.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6.IT.Car3", "L6b")])
human.counts$GABAergic <- rowSums(human.counts[, c("Pvalb", "Sst", "Vip", "Sncg", "Lamp5", "Pax6")])
human.counts$MGE <- rowSums(human.counts[, c("Pvalb", "Sst")])
human.counts$CGE <- rowSums(human.counts[, c("Vip", "Lamp5", "Sncg")])
human.counts$Neuronal <- rowSums(human.counts[, c("Glutamatergic", "GABAergic")])
human.counts$Nonneuronal <- rowSums(human.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
# chimp.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Chimp_Subclass_Sample.csv")
# chimp.counts <- chimp.counts[-1, ]
# rownames(chimp.counts) <- chimp.counts$X
# chimp.counts <- chimp.counts[, -1]
# chimp.counts$Pvalb <- chimp.counts$Pvalb + chimp.counts$Chandelier
# chimp.counts$Lamp5 <- chimp.counts$Lamp5 + chimp.counts$Lamp5_Lhx6
# chimp.counts$Peri <- 0
# chimp.counts$SMC <- 0
# chimp.counts$Glutamatergic <- rowSums(chimp.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
# chimp.counts$GABAergic <- rowSums(chimp.counts[, c("Pvalb", "Sst", "Sst.Chodl", "Vip", "Sncg", "Lamp5", "Pax6")])
# chimp.counts$Nonneuronal <- rowSums(chimp.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
# chimp.counts$Neuronal <- rowSums(chimp.counts[, c("Glutamatergic", "GABAergic")])
# chimp.counts$L4.IT <- 0
# chimp.counts$Stac <- 0
# chimp.counts$Frem1 <- 0
# chimp.counts$Meis2 <- 0
# chimp.counts$species <- "Chimp"
# marmoset.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Marmoset_Subclass_Sample.csv")
# marmoset.counts <- marmoset.counts[-1, ]
# rownames(marmoset.counts) <- marmoset.counts$X
# marmoset.counts <- marmoset.counts[, -1]
# marmoset.counts$Pvalb <- marmoset.counts$Pvalb + marmoset.counts$Chandelier
# marmoset.counts$Lamp5 <- marmoset.counts$Lamp5 + marmoset.counts$Lamp5_Lhx6
# marmoset.counts$Peri <- 0
# marmoset.counts$SMC <- 0
# marmoset.counts$Glutamatergic <- rowSums(marmoset.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
# marmoset.counts$GABAergic <- rowSums(marmoset.counts[, c("Pvalb", "Sst", "Sst.Chodl", "Vip", "Sncg", "Lamp5", "Pax6")])
# marmoset.counts$Nonneuronal <- rowSums(marmoset.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
# marmoset.counts$Neuronal <- rowSums(marmoset.counts[, c("Glutamatergic", "GABAergic")])
# marmoset.counts$L4.IT <- 0
# marmoset.counts$Stac <- 0
# marmoset.counts$Frem1 <- 0
# marmoset.counts$Meis2 <- 0
# marmoset.counts$species <- "Marmoset"
mouse.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Mouse_Subclass_Sample.csv")
mouse.counts <- mouse.counts[-1, ]
rownames(mouse.counts) <- mouse.counts$X
mouse.counts <- mouse.counts[, -1]
mouse.counts$species <- "Mouse"
mouse.counts$L4.IT <- 0
mouse.counts$L6.IT.Car3 <- 0
mouse.counts$Stac <- 0
mouse.counts$Frem1 <- 0
mouse.counts$Lamp5_Lhx6 <- 0
mouse.counts$Chandelier <- 0
mouse.counts$Pax6 <- 0
mouse.counts$Sst <- mouse.counts$Sst + mouse.counts$Sst.Chodl
mouse.counts$Glutamatergic <- rowSums(mouse.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
mouse.counts$GABAergic <- rowSums(mouse.counts[, c("Pvalb", "Sst", "Vip", "Sncg", "Lamp5", "Meis2")])
mouse.counts$MGE <- rowSums(mouse.counts[, c("Pvalb", "Sst")])
mouse.counts$CGE <- rowSums(mouse.counts[, c("Vip", "Lamp5", "Sncg")])
mouse.counts$Neuronal <- rowSums(mouse.counts[, c("Glutamatergic", "GABAergic")])
mouse.counts$Nonneuronal <- rowSums(mouse.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
opossum.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Opossum_Subclass_Sample.csv")
rownames(opossum.counts) <- opossum.counts$X
opossum.counts <- opossum.counts[, -1]
opossum.counts$species <- "Opossum"
opossum.counts$L4.IT <- 0
opossum.counts$L6.IT <- 0
opossum.counts$Sncg <- 0
opossum.counts$Meis2 <- 0
opossum.counts$SMC <- 0
opossum.counts$Stac <- 0
opossum.counts$Frem1 <- 0
opossum.counts$Lamp5_Lhx6 <- 0
opossum.counts$Chandelier <- 0
opossum.counts$L6.IT.Car3 <- 0
opossum.counts$Pax6 <- 0
opossum.counts$Sst.Chodl <- 0
opossum.counts$Peri <- 0
opossum.counts$Glutamatergic <- rowSums(opossum.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6b")])
opossum.counts$GABAergic <- rowSums(opossum.counts[, c("Pvalb", "Sst", "Vip", "Lamp5")])
opossum.counts$MGE <- rowSums(opossum.counts[, c("Pvalb", "Sst")])
opossum.counts$CGE <- rowSums(opossum.counts[, c("Vip", "Lamp5", "Sncg")])
opossum.counts$Neuronal <- rowSums(opossum.counts[, c("Glutamatergic", "GABAergic")])
opossum.counts$Nonneuronal <- rowSums(opossum.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "VLMC")])
# ymouse.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_YoungMouse2_Subclass_Sample.csv")
# rownames(ymouse.counts) <- ymouse.counts$X
# ymouse.counts <- ymouse.counts[, -1]
# ymouse.counts$Glutamatergic <- rowSums(ymouse.counts[, c("L2.3.IT", "L5.ET", "L4.IT", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
# ymouse.counts$GABAergic <- rowSums(ymouse.counts[, c("Pvalb", "Sst", "Sst.Chodl", "Vip", "Lamp5", "Stac", "Frem1")])
# ymouse.counts$Nonneuronal <- rowSums(ymouse.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "VLMC")])
# ymouse.counts$Neuronal <- rowSums(ymouse.counts[, c("Glutamatergic", "GABAergic")])
# ymouse.counts$Sncg <- 0
# ymouse.counts$Meis2 <- 0
# ymouse.counts$SMC <- 0
# ymouse.counts$L5.IT <- ymouse.counts$L4.IT + ymouse.counts$L5.IT
# ymouse.counts$species <- "Young Mouse"
both.counts <- rbind(human.counts, mouse.counts)
both.counts <- rbind(both.counts, opossum.counts)
both.counts$sample <- rownames(both.counts)
both.counts <- both.counts %>%
mutate(L2.3.IT = L2.3.IT / Glutamatergic,
L5.ET = L5.ET / Glutamatergic,
L5.IT = L5.IT / Glutamatergic,
L5.6.NP = L5.6.NP / Glutamatergic,
L6.CT = L6.CT / Glutamatergic,
L6.IT = L6.IT / Glutamatergic,
L6b = L6b / Glutamatergic,
Pvalb_CGE = Pvalb / (Pvalb + CGE),
CGE_Pvalb = CGE / (CGE + Pvalb),
Pvalb = Pvalb / GABAergic,
Sst = Sst / GABAergic,
Vip = Vip / GABAergic,
Sncg = Sncg / GABAergic,
Lamp5 = Lamp5 / GABAergic,
Meis2 = Meis2 / GABAergic,
MGE = MGE / GABAergic,
CGE = CGE / GABAergic,
Glutamatergic = Glutamatergic / Neuronal,
GABAergic = GABAergic / Neuronal,
EI = Glutamatergic / GABAergic
)
scatter.counts <- both.counts
both.counts <- both.counts %>%
pivot_longer(
cols = c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b", "Pvalb", "Sst", "Vip", "Sncg", "Lamp5", "Meis2", "Glutamatergic", "GABAergic", "Nonneuronal", "Neuronal", "MGE", "CGE", "Pvalb_CGE", "CGE_Pvalb", "EI"),
names_to = "cell.identity",
values_to = "fraction"
)
both.counts$species <- factor(both.counts$species, levels = c("Opossum", "Mouse", "Human"))
class.counts <- both.counts[both.counts$cell.identity %in% c("EI"), ]
ggplot(class.counts, aes(x = factor(cell.identity, level = c("EI")), y = fraction, fill = species)) +
geom_bar(stat = "summary", fun = "median", position = position_dodge(width = 0.8), width = 0.75) +
geom_point(colour = "black", position = position_dodge(width = 0.8), size = 1) +
scale_x_discrete(labels = c("")) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), expand = c(0, 0), limits = c(0, 1)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
theme_classic() + theme(axis.text = element_text(color = "black"), legend.text = element_text(size = 10)) +
labs(x = NULL, y = "E/I Ratio", fill = NULL) +
scale_fill_manual("legend", values = c("Opossum" = "#c692b8", "Mouse" = "#aaaaaa", "Human" = "#f1c296"))
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.svg", plot=hmo_class, width=3.5, height=3, dpi=500)
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.png", plot=hmo_class, width=3.5, height=3, dpi=500)
class.counts
library(tidyverse)
library(dplyr)
human.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Human_Subclass_Sample.csv")
human.counts <- human.counts[-1, ]
rownames(human.counts) <- human.counts$X
human.counts <- human.counts[, -1]
human.counts$species <- "Human"
human.counts$Stac <- 0
human.counts$Frem1 <- 0
human.counts$Meis2 <- 0
human.counts$Peri <- 0
human.counts$SMC <- 0
human.counts$Pvalb <- human.counts$Pvalb + human.counts$Chandelier
human.counts$Lamp5 <- human.counts$Lamp5 + human.counts$Lamp5_Lhx6
human.counts$Sst <- human.counts$Sst + human.counts$Sst.Chodl
human.counts$Glutamatergic <- rowSums(human.counts[, c("L2.3.IT", "L4.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6.IT.Car3", "L6b")])
human.counts$GABAergic <- rowSums(human.counts[, c("Pvalb", "Sst", "Vip", "Sncg", "Lamp5", "Pax6")])
human.counts$MGE <- rowSums(human.counts[, c("Pvalb", "Sst")])
human.counts$CGE <- rowSums(human.counts[, c("Vip", "Lamp5", "Sncg")])
human.counts$Neuronal <- rowSums(human.counts[, c("Glutamatergic", "GABAergic")])
human.counts$Nonneuronal <- rowSums(human.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
# chimp.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Chimp_Subclass_Sample.csv")
# chimp.counts <- chimp.counts[-1, ]
# rownames(chimp.counts) <- chimp.counts$X
# chimp.counts <- chimp.counts[, -1]
# chimp.counts$Pvalb <- chimp.counts$Pvalb + chimp.counts$Chandelier
# chimp.counts$Lamp5 <- chimp.counts$Lamp5 + chimp.counts$Lamp5_Lhx6
# chimp.counts$Peri <- 0
# chimp.counts$SMC <- 0
# chimp.counts$Glutamatergic <- rowSums(chimp.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
# chimp.counts$GABAergic <- rowSums(chimp.counts[, c("Pvalb", "Sst", "Sst.Chodl", "Vip", "Sncg", "Lamp5", "Pax6")])
# chimp.counts$Nonneuronal <- rowSums(chimp.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
# chimp.counts$Neuronal <- rowSums(chimp.counts[, c("Glutamatergic", "GABAergic")])
# chimp.counts$L4.IT <- 0
# chimp.counts$Stac <- 0
# chimp.counts$Frem1 <- 0
# chimp.counts$Meis2 <- 0
# chimp.counts$species <- "Chimp"
# marmoset.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Marmoset_Subclass_Sample.csv")
# marmoset.counts <- marmoset.counts[-1, ]
# rownames(marmoset.counts) <- marmoset.counts$X
# marmoset.counts <- marmoset.counts[, -1]
# marmoset.counts$Pvalb <- marmoset.counts$Pvalb + marmoset.counts$Chandelier
# marmoset.counts$Lamp5 <- marmoset.counts$Lamp5 + marmoset.counts$Lamp5_Lhx6
# marmoset.counts$Peri <- 0
# marmoset.counts$SMC <- 0
# marmoset.counts$Glutamatergic <- rowSums(marmoset.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
# marmoset.counts$GABAergic <- rowSums(marmoset.counts[, c("Pvalb", "Sst", "Sst.Chodl", "Vip", "Sncg", "Lamp5", "Pax6")])
# marmoset.counts$Nonneuronal <- rowSums(marmoset.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
# marmoset.counts$Neuronal <- rowSums(marmoset.counts[, c("Glutamatergic", "GABAergic")])
# marmoset.counts$L4.IT <- 0
# marmoset.counts$Stac <- 0
# marmoset.counts$Frem1 <- 0
# marmoset.counts$Meis2 <- 0
# marmoset.counts$species <- "Marmoset"
mouse.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Mouse_Subclass_Sample.csv")
mouse.counts <- mouse.counts[-1, ]
rownames(mouse.counts) <- mouse.counts$X
mouse.counts <- mouse.counts[, -1]
mouse.counts$species <- "Mouse"
mouse.counts$L4.IT <- 0
mouse.counts$L6.IT.Car3 <- 0
mouse.counts$Stac <- 0
mouse.counts$Frem1 <- 0
mouse.counts$Lamp5_Lhx6 <- 0
mouse.counts$Chandelier <- 0
mouse.counts$Pax6 <- 0
mouse.counts$Sst <- mouse.counts$Sst + mouse.counts$Sst.Chodl
mouse.counts$Glutamatergic <- rowSums(mouse.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
mouse.counts$GABAergic <- rowSums(mouse.counts[, c("Pvalb", "Sst", "Vip", "Sncg", "Lamp5", "Meis2")])
mouse.counts$MGE <- rowSums(mouse.counts[, c("Pvalb", "Sst")])
mouse.counts$CGE <- rowSums(mouse.counts[, c("Vip", "Lamp5", "Sncg")])
mouse.counts$Neuronal <- rowSums(mouse.counts[, c("Glutamatergic", "GABAergic")])
mouse.counts$Nonneuronal <- rowSums(mouse.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "SMC", "VLMC")])
opossum.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_Opossum_Subclass_Sample.csv")
rownames(opossum.counts) <- opossum.counts$X
opossum.counts <- opossum.counts[, -1]
opossum.counts$species <- "Opossum"
opossum.counts$L4.IT <- 0
opossum.counts$L6.IT <- 0
opossum.counts$Sncg <- 0
opossum.counts$Meis2 <- 0
opossum.counts$SMC <- 0
opossum.counts$Stac <- 0
opossum.counts$Frem1 <- 0
opossum.counts$Lamp5_Lhx6 <- 0
opossum.counts$Chandelier <- 0
opossum.counts$L6.IT.Car3 <- 0
opossum.counts$Pax6 <- 0
opossum.counts$Sst.Chodl <- 0
opossum.counts$Peri <- 0
opossum.counts$Glutamatergic <- rowSums(opossum.counts[, c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6b")])
opossum.counts$GABAergic <- rowSums(opossum.counts[, c("Pvalb", "Sst", "Vip", "Lamp5")])
opossum.counts$MGE <- rowSums(opossum.counts[, c("Pvalb", "Sst")])
opossum.counts$CGE <- rowSums(opossum.counts[, c("Vip", "Lamp5", "Sncg")])
opossum.counts$Neuronal <- rowSums(opossum.counts[, c("Glutamatergic", "GABAergic")])
opossum.counts$Nonneuronal <- rowSums(opossum.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "VLMC")])
# ymouse.counts <- read.csv("G:/Shared drives/Opossum transcriptomics/figures/Figure_1_YoungMouse2_Subclass_Sample.csv")
# rownames(ymouse.counts) <- ymouse.counts$X
# ymouse.counts <- ymouse.counts[, -1]
# ymouse.counts$Glutamatergic <- rowSums(ymouse.counts[, c("L2.3.IT", "L5.ET", "L4.IT", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b")])
# ymouse.counts$GABAergic <- rowSums(ymouse.counts[, c("Pvalb", "Sst", "Sst.Chodl", "Vip", "Lamp5", "Stac", "Frem1")])
# ymouse.counts$Nonneuronal <- rowSums(ymouse.counts[, c("Astro", "Endo", "Micro.PVM", "Oligo", "OPC", "Peri", "VLMC")])
# ymouse.counts$Neuronal <- rowSums(ymouse.counts[, c("Glutamatergic", "GABAergic")])
# ymouse.counts$Sncg <- 0
# ymouse.counts$Meis2 <- 0
# ymouse.counts$SMC <- 0
# ymouse.counts$L5.IT <- ymouse.counts$L4.IT + ymouse.counts$L5.IT
# ymouse.counts$species <- "Young Mouse"
both.counts <- rbind(human.counts, mouse.counts)
both.counts <- rbind(both.counts, opossum.counts)
both.counts$sample <- rownames(both.counts)
both.counts <- both.counts %>%
mutate(L2.3.IT = L2.3.IT / Glutamatergic,
L5.ET = L5.ET / Glutamatergic,
L5.IT = L5.IT / Glutamatergic,
L5.6.NP = L5.6.NP / Glutamatergic,
L6.CT = L6.CT / Glutamatergic,
L6.IT = L6.IT / Glutamatergic,
L6b = L6b / Glutamatergic,
Pvalb_CGE = Pvalb / (Pvalb + CGE),
CGE_Pvalb = CGE / (CGE + Pvalb),
Pvalb = Pvalb / GABAergic,
Sst = Sst / GABAergic,
Vip = Vip / GABAergic,
Sncg = Sncg / GABAergic,
Lamp5 = Lamp5 / GABAergic,
Meis2 = Meis2 / GABAergic,
MGE = MGE / GABAergic,
CGE = CGE / GABAergic,
EI = Glutamatergic / GABAergic,
Glutamatergic = Glutamatergic / Neuronal,
GABAergic = GABAergic / Neuronal
)
scatter.counts <- both.counts
both.counts <- both.counts %>%
pivot_longer(
cols = c("L2.3.IT", "L5.ET", "L5.IT", "L5.6.NP", "L6.CT", "L6.IT", "L6b", "Pvalb", "Sst", "Vip", "Sncg", "Lamp5", "Meis2", "Glutamatergic", "GABAergic", "Nonneuronal", "Neuronal", "MGE", "CGE", "Pvalb_CGE", "CGE_Pvalb", "EI"),
names_to = "cell.identity",
values_to = "fraction"
)
both.counts$species <- factor(both.counts$species, levels = c("Opossum", "Mouse", "Human"))
class.counts <- both.counts[both.counts$cell.identity %in% c("EI"), ]
ggplot(class.counts, aes(x = factor(cell.identity, level = c("EI")), y = fraction, fill = species)) +
geom_bar(stat = "summary", fun = "median", position = position_dodge(width = 0.8), width = 0.75) +
geom_point(colour = "black", position = position_dodge(width = 0.8), size = 1) +
scale_x_discrete(labels = c("")) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), expand = c(0, 0), limits = c(0, 1)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
theme_classic() + theme(axis.text = element_text(color = "black"), legend.text = element_text(size = 10)) +
labs(x = NULL, y = "E/I Ratio", fill = NULL) +
scale_fill_manual("legend", values = c("Opossum" = "#c692b8", "Mouse" = "#aaaaaa", "Human" = "#f1c296"))
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.svg", plot=hmo_class, width=3.5, height=3, dpi=500)
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.png", plot=hmo_class, width=3.5, height=3, dpi=500)
class.counts
both.counts$species <- factor(both.counts$species, levels = c("Opossum", "Mouse", "Human"))
class.counts <- both.counts[both.counts$cell.identity %in% c("EI"), ]
ggplot(class.counts, aes(x = factor(cell.identity, level = c("EI")), y = fraction, fill = species)) +
geom_bar(stat = "summary", fun = "median", position = position_dodge(width = 0.8), width = 0.75) +
geom_point(colour = "black", position = position_dodge(width = 0.8), size = 1) +
scale_x_discrete(labels = c("")) +
scale_y_continuous(breaks = c(0, 0.25, 0.5, 0.75, 1), expand = c(0, 0), limits = c(0, 10)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
theme_classic() + theme(axis.text = element_text(color = "black"), legend.text = element_text(size = 10)) +
labs(x = NULL, y = "E/I Ratio", fill = NULL) +
scale_fill_manual("legend", values = c("Opossum" = "#c692b8", "Mouse" = "#aaaaaa", "Human" = "#f1c296"))
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.svg", plot=hmo_class, width=3.5, height=3, dpi=500)
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.png", plot=hmo_class, width=3.5, height=3, dpi=500)
both.counts$species <- factor(both.counts$species, levels = c("Opossum", "Mouse", "Human"))
class.counts <- both.counts[both.counts$cell.identity %in% c("EI"), ]
ggplot(class.counts, aes(x = factor(cell.identity, level = c("EI")), y = fraction, fill = species)) +
geom_bar(stat = "summary", fun = "median", position = position_dodge(width = 0.8), width = 0.75) +
geom_point(colour = "black", position = position_dodge(width = 0.8), size = 1) +
scale_x_discrete(labels = c("")) +
scale_y_continuous(breaks = c(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10), expand = c(0, 0), limits = c(0, 10)) +
guides(fill = guide_legend(override.aes = list(shape = NA))) +
theme_classic() + theme(axis.text = element_text(color = "black"), legend.text = element_text(size = 10)) +
labs(x = NULL, y = "E/I Ratio", fill = NULL) +
scale_fill_manual("legend", values = c("Opossum" = "#c692b8", "Mouse" = "#aaaaaa", "Human" = "#f1c296"))
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.svg", plot=hmo_class, width=3.5, height=3, dpi=500)
# ggsave(file="G:/Shared drives/Opossum transcriptomics/figures/HMO_Class_Proportion.png", plot=hmo_class, width=3.5, height=3, dpi=500)
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset", raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "subclass", split.by = "dataset", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "ts_integrated_snn_res.1", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", split.by = "dataset", label = TRUE, raster = FALSE, label.size = 2) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
obj.combined.sct
obj.combined.sct[[]]
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset", raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "subclass_label", split.by = "dataset", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "ts_integrated_snn_res.1", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", split.by = "dataset", label = TRUE, raster = FALSE, label.size = 2) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset", raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "subclass_label", split.by = "dataset", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "ts_integrated_snn_res.1", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", split.by = "dataset", label = TRUE, raster = FALSE, label.size = 2) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset", raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "subclass_label", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "ts_integrated_snn_res.1", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", split.by = "dataset", label = TRUE, raster = FALSE, label.size = 2) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "dataset", raster = FALSE, shuffle = TRUE) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "subclass_label", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
DimPlot(obj.combined.sct, reduction = "umap", group.by = "ts_integrated_snn_res.1", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", raster = FALSE, label = TRUE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
# DimPlot(obj.combined.sct, reduction = "umap", group.by = "type", split.by = "dataset", label = TRUE, raster = FALSE, label.size = 2) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
library(data.table)
data_path <- "E:/Cat_M1/output/"
sample_IDs <- c("NW_TX0132-3", "NW_TX0133-5", "NW_TX0133-6", "NW_TX0133-7", "NW_TX0135-6", "NW_TX0135-7",
"NW_TX0137-1", "NW_TX0137-2", "NW_TX0141-12", "NW_TX0142-1", "NW_TX0145-9", "NW_TX0146-3")
objs <- c()
for (sample in sample_IDs) {
temp.obj.path <- paste(data_path, sample, "/outs/filtered_feature_bc_matrix/", sep = "")
temp.obj.data <- Read10X(temp.obj.path)
temp.obj <- CreateSeuratObject(counts = temp.obj.data, project = "Cat_M1")
temp.obj$sample <- sample
temp.obj <- scrublet_R(seurat_obj = temp.obj)
objs <- append(objs, temp.obj)
}
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
library(data.table)
data_path <- "E:/Cat_M1/output/"
sample_IDs <- c("NW_TX0132-3",  "NW_TX0135-6", "NW_TX0135-7", # "NW_TX0133-5", "NW_TX0133-6", "NW_TX0133-7",
"NW_TX0137-1", "NW_TX0137-2", "NW_TX0141-12", "NW_TX0142-1", "NW_TX0145-9", "NW_TX0146-3")
objs <- c()
for (sample in sample_IDs) {
temp.obj.path <- paste(data_path, sample, "/outs/filtered_feature_bc_matrix/", sep = "")
temp.obj.data <- Read10X(temp.obj.path)
temp.obj <- CreateSeuratObject(counts = temp.obj.data, project = "Cat_M1")
temp.obj$sample <- sample
temp.obj <- scrublet_R(seurat_obj = temp.obj)
objs <- append(objs, temp.obj)
}
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
library(data.table)
data_path <- "E:/Cat_M1/output/"
sample_IDs <- c("NW_TX0132-3", "NW_TX0133-5", "NW_TX0135-7", # "NW_TX0133-6", "NW_TX0133-7", "NW_TX0135-6",
"NW_TX0137-1", "NW_TX0137-2", "NW_TX0141-12", "NW_TX0142-1", "NW_TX0145-9", "NW_TX0146-3")
objs <- c()
for (sample in sample_IDs) {
temp.obj.path <- paste(data_path, sample, "/outs/filtered_feature_bc_matrix/", sep = "")
temp.obj.data <- Read10X(temp.obj.path)
temp.obj <- CreateSeuratObject(counts = temp.obj.data, project = "Cat_M1")
temp.obj$sample <- sample
temp.obj <- scrublet_R(seurat_obj = temp.obj)
objs <- append(objs, temp.obj)
}
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
obj.opossum.gabaergic <- LoadH5Seurat("E:/Opossum_M1/seurat/opossum_m1_gabaergic.h5Seurat") # _raw
DimPlot(obj.opossum.gabaergic, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Gad1")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Gad2")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Sst")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Pvalb")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Vip")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Lamp5")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Sncg")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Meis2")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum.gabaergic, reduction = "umap", features = c("Chodl")) + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
