obj.cat.gabaergic <- NormalizeData(obj.cat.gabaergic, normalization.method = "LogNormalize", scale.factor = 10000)
obj.cat.gabaergic <- FindVariableFeatures(obj.cat.gabaergic, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.cat.gabaergic)
obj.cat.gabaergic <- ScaleData(obj.cat.gabaergic, features = all.genes)
obj.cat.gabaergic <- RunPCA(obj.cat.gabaergic, features = VariableFeatures(object = obj.cat.gabaergic))
obj.cat.gabaergic <- FindNeighbors(obj.cat.gabaergic, dims = 1:30)
obj.cat.gabaergic <- FindClusters(obj.cat.gabaergic, resolution = 1.1, algorithm = 4, method = "igraph")
obj.cat.gabaergic <- RunUMAP(obj.cat.gabaergic, dims = 1:30, method="umap-learn")
obj.cat.nonneuronal <- NormalizeData(obj.cat.nonneuronal, normalization.method = "LogNormalize", scale.factor = 10000)
obj.cat.nonneuronal <- FindVariableFeatures(obj.cat.nonneuronal, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.cat.nonneuronal)
obj.cat.nonneuronal <- ScaleData(obj.cat.nonneuronal, features = all.genes)
obj.cat.nonneuronal <- RunPCA(obj.cat.nonneuronal, features = VariableFeatures(object = obj.cat.nonneuronal))
obj.cat.nonneuronal <- FindNeighbors(obj.cat.nonneuronal, dims = 1:30)
obj.cat.nonneuronal <- FindClusters(obj.cat.nonneuronal, resolution = 1, algorithm = 4, method = "igraph")
obj.cat.nonneuronal <- RunUMAP(obj.cat.nonneuronal, dims = 1:30, method="umap-learn")
SaveH5Seurat(obj.cat.glutamatergic, "E:/cat_M1/seurat/cat_m1_glutamatergic_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
SaveH5Seurat(obj.cat.gabaergic, "E:/cat_M1/seurat/cat_m1_gabaergic_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
SaveH5Seurat(obj.cat.nonneuronal, "E:/cat_M1/seurat/cat_m1_nonneuronal_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
library(data.table)
data_path <- "E:/Opossum_M1/output/monDom5/"
sample_IDs <- c("NW_TX0055-4", "NW_TX0055-5", "NW_TX0055-6", "NW_TX0064-3",
"NW_TX0064-4", "NW_TX0064-5", "NW_TX0077-7", "NW_TX0077-8",
"NW_TX0078-1", "NW_TX0090-11", "NW_TX0092-8")
objs <- c()
for (sample in sample_IDs) {
temp.obj.path <- paste(data_path, sample, "/outs/filtered_feature_bc_matrix/", sep = "")
temp.obj.data <- Read10X(temp.obj.path)
temp.obj <- CreateSeuratObject(counts = temp.obj.data, project = "Opossum_M1")
temp.obj$sample <- sample
temp.obj <- scrublet_R(seurat_obj = temp.obj)
objs <- append(objs, temp.obj)
}
obj.opossum <- merge(objs[[1]], y = objs[2:11], add.cell.ids = sample_IDs, project = "Opossum_M1")
VlnPlot(obj.opossum, features = c("nFeature_RNA"), group.by = "sample", raster = FALSE)
VlnPlot(obj.opossum, features = c("nCount_RNA"), group.by = "sample", raster = FALSE)
FeatureScatter(obj.opossum, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)
#confirm but I think we keep this in
genes.mapping <- read.csv("E:/Opossum_Mouse_Genes.txt")
VlnPlot(obj.opossum, features = c("nFeature_RNA"), group.by = "sample", raster = FALSE)
VlnPlot(obj.opossum, features = c("nCount_RNA"), group.by = "sample", raster = FALSE)
FeatureScatter(obj.opossum, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)
cell_mask <- Reduce(intersect,list(WhichCells(obj.opossum, expression = nFeature_RNA > 700),
WhichCells(obj.opossum, expression = nFeature_RNA < 6500),
WhichCells(obj.opossum, expression = nCount_RNA < 40000)))
gene_mask <- rownames(obj.opossum)[Matrix::rowSums(obj.opossum[["RNA"]]@counts > 0) > 8]
obj.opossum <- subset(obj.opossum, features = gene_mask, cells = cell_mask)
cell_mask <- Reduce(intersect,list(WhichCells(obj.opossum, expression = nFeature_RNA > 700),
WhichCells(obj.opossum, expression = nFeature_RNA < 6500),
WhichCells(obj.opossum, expression = nCount_RNA < 40000)))
gene_mask <- rownames(obj.opossum)[Matrix::rowSums(obj.opossum[["RNA"]]@counts > 0) > 8]
obj.opossum <- subset(obj.opossum, features = gene_mask, cells = cell_mask)
obj.opossum <- NormalizeData(obj.opossum, normalization.method = "LogNormalize", scale.factor = 10000)
obj.opossum <- FindVariableFeatures(obj.opossum, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.opossum)
obj.opossum <- ScaleData(obj.opossum, features = all.genes)
obj.opossum <- RunPCA(obj.opossum, features = VariableFeatures(object = obj.opossum))
ElbowPlot(obj.opossum, ndims = 50)
obj.opossum <- FindNeighbors(obj.opossum, dims = 1:30)
obj.opossum <- FindClusters(obj.opossum, resolution = 1, algorithm = 4, method = "igraph")
obj.opossum <- RunUMAP(obj.opossum, dims = 1:30, method="umap-learn")
DimPlot(obj.opossum, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum, reduction = "umap", group.by = "sample", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, "nFeature_RNA", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, "nCount_RNA", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum, reduction = "umap", group.by = "predicted_doublets", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#glutamatergic
FeaturePlot(obj.cat, reduction = "umap", features = c("SNAP25"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("SNAP25"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SLC17A7"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("SNAP25"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
#FeaturePlot(obj.opossum, reduction = "umap", features = c("SLC17A7"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("CSF1R"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("MOG"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("PDGFRA"), raster = FALSE) + NoLegend() + xlim(-18, 18) + ylim(-18, 18) + coord_equal()
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("SNAP25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SLC17A6"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("GAD2"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("CSF1R"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("MOG"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
# FeaturePlot(obj.opossum, reduction = "umap", features = c("PDGFRA"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("ALDH1L1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("COL1A1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#GABAergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("PVALB"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SST"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("VIP"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("LAMP5"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SNCG"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#non-neuronal
FeaturePlot(obj.opossum, reduction = "umap", features = c("CSF1R"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # microglia
FeaturePlot(obj.opossum, reduction = "umap", features = c("MOG"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # oligodendrocytes
FeaturePlot(obj.opossum, reduction = "umap", features = c("PDGFRA"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # OPC
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("SNAP25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SLC17A6"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("GAD2"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("CSF1R"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("MOG"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
# FeaturePlot(obj.opossum, reduction = "umap", features = c("PDGFRA"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("ALDH1L1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("COL1A1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#GABAergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("PVALB"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SST"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("VIP"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("LAMP5"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SNCG"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#non-neuronal
FeaturePlot(obj.opossum, reduction = "umap", features = c("CSF1R"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # microglia
FeaturePlot(obj.opossum, reduction = "umap", features = c("MOG"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # oligodendrocytes
#FeaturePlot(obj.opossum, reduction = "umap", features = c("PDGFRA"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # OPC
FeaturePlot(obj.opossum, reduction = "umap", features = c("AQP4"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # astrocytes
FeaturePlot(obj.opossum, reduction = "umap", features = c("COL1A1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # VLMC
FeaturePlot(obj.opossum, reduction = "umap", features = c("TEK"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # endothelial
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
library(data.table)
data_path <- "E:/Opossum_M1/output/monDom5/"
sample_IDs <- c("NW_TX0055-4", "NW_TX0055-5", "NW_TX0055-6", "NW_TX0064-3",
"NW_TX0064-4", "NW_TX0064-5", "NW_TX0077-7", "NW_TX0077-8",
"NW_TX0078-1", "NW_TX0090-11", "NW_TX0092-8")
objs <- c()
for (sample in sample_IDs) {
temp.obj.path <- paste(data_path, sample, "/outs/filtered_feature_bc_matrix/", sep = "")
temp.obj.data <- Read10X(temp.obj.path)
temp.obj <- CreateSeuratObject(counts = temp.obj.data, project = "Opossum_M1")
temp.obj$sample <- sample
temp.obj <- scrublet_R(seurat_obj = temp.obj)
objs <- append(objs, temp.obj)
}
obj.opossum <- merge(objs[[1]], y = objs[2:11], add.cell.ids = sample_IDs, project = "Opossum_M1")
VlnPlot(obj.opossum, features = c("nFeature_RNA"), group.by = "sample", raster = FALSE)
VlnPlot(obj.opossum, features = c("nCount_RNA"), group.by = "sample", raster = FALSE)
FeatureSopossumter(obj.opossum, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)
VlnPlot(obj.opossum, features = c("nFeature_RNA"), group.by = "sample", raster = FALSE)
VlnPlot(obj.opossum, features = c("nCount_RNA"), group.by = "sample", raster = FALSE)
FeatureScatter(obj.opossum, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)
genes.mapping <- read.csv("E:/_genomes/Opossum_Mouse_Genes.txt")
genes.mapping.mouse <- as.list(genes.mapping$Mouse.gene.name)
genes.mapping.opossum <- as.list(genes.mapping$Gene.name)
ids.mapping.opossum <- as.list(genes.mapping$Gene.stable.ID)
genes.opossum = rownames(obj.opossum)
for (gene in genes.mapping.mouse) {
idx.mouse <- which(genes.mapping.mouse %in% gene)
if (length(idx.mouse) == 1) {
gene.opossum <- genes.mapping.opossum[idx.mouse]
id.opossum <- ids.mapping.opossum[idx.mouse]
if (gene.opossum == "") {
idx.opossum <- which(genes.opossum %in% id.opossum)
genes.opossum[idx.opossum] <- gene
} else {
idx.opossum <- which(genes.opossum %in% gene.opossum)
genes.opossum[idx.opossum] <- gene
}
}
}
obj.df <- as.data.frame(as.matrix(obj.opossum[["RNA"]]@counts))
rownames(obj.df) <- genes.opossum
obj.opossum.temp <- CreateSeuratObject(counts = obj.df, meta.data = obj.opossum[[]])
obj.opossum <- obj.opossum.temp
VlnPlot(obj.opossum, features = c("nFeature_RNA"), group.by = "sample", raster = FALSE)
VlnPlot(obj.opossum, features = c("nCount_RNA"), group.by = "sample", raster = FALSE)
FeatureSopossumter(obj.opossum, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)
VlnPlot(obj.opossum, features = c("nFeature_RNA"), group.by = "sample", raster = FALSE)
VlnPlot(obj.opossum, features = c("nCount_RNA"), group.by = "sample", raster = FALSE)
FeatureScatter(obj.opossum, feature1 = "nCount_RNA", feature2 = "nFeature_RNA", raster = FALSE)
cell_mask <- Reduce(intersect,list(WhichCells(obj.opossum, expression = nFeature_RNA > 700),
WhichCells(obj.opossum, expression = nFeature_RNA < 6500),
WhichCells(obj.opossum, expression = nCount_RNA < 40000)))
gene_mask <- rownames(obj.opossum)[Matrix::rowSums(obj.opossum[["RNA"]]@counts > 0) > 8]
obj.opossum <- subset(obj.opossum, features = gene_mask, cells = cell_mask)
obj.opossum <- NormalizeData(obj.opossum, normalization.method = "LogNormalize", scale.factor = 10000)
obj.opossum <- FindVariableFeatures(obj.opossum, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.opossum)
obj.opossum <- ScaleData(obj.opossum, features = all.genes)
obj.opossum <- RunPCA(obj.opossum, features = VariableFeatures(object = obj.opossum))
ElbowPlot(obj.opossum, ndims = 50)
obj.opossum <- FindNeighbors(obj.opossum, dims = 1:30)
obj.opossum <- FindClusters(obj.opossum, resolution = 1, algorithm = 4, method = "igraph")
obj.opossum <- RunUMAP(obj.opossum, dims = 1:30, method="umap-learn")
DimPlot(obj.opossum, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum, reduction = "umap", group.by = "sample", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, "nFeature_RNA", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, "nCount_RNA", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.opossum, reduction = "umap", group.by = "predicted_doublets", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("SNAP25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("Snap25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("SLC17A6"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("Snap25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Slc17a6"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("GAD2"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("Snap25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Slc17a6"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Gad2"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Aldh1l1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Col1a1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#GABAergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("Pvalb"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("PVALB"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("PVALB"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Sst"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Vip"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Lamp5"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Sncg"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Csf1r"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # microglia
FeaturePlot(obj.opossum, reduction = "umap", features = c("Mog"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # oligodendrocytes
FeaturePlot(obj.opossum, reduction = "umap", features = c("Pdgfra"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("PDGFRA"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Aqp4"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # astrocytes
FeaturePlot(obj.opossum, reduction = "umap", features = c("Col1a1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # VLMC
FeaturePlot(obj.opossum, reduction = "umap", features = c("Tek"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # endothelial
#glutamatergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("Snap25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Slc17a6"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Gad2"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Aldh1l1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Col1a1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#GABAergic
FeaturePlot(obj.opossum, reduction = "umap", features = c("PVALB"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Sst"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Vip"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Lamp5"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Sncg"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
#non-neuronal
FeaturePlot(obj.opossum, reduction = "umap", features = c("Csf1r"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # microglia
FeaturePlot(obj.opossum, reduction = "umap", features = c("Mog"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # oligodendrocytes
#FeaturePlot(obj.opossum, reduction = "umap", features = c("PDGFRA"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Aqp4"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # astrocytes
FeaturePlot(obj.opossum, reduction = "umap", features = c("Col1a1"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # VLMC
FeaturePlot(obj.opossum, reduction = "umap", features = c("Tek"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal() # endothelial
cells.glutamatergic <- WhichCells(obj.opossum, ident = c(1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 25))
obj.opossum$class <- ifelse(colnames(obj.opossum) %in% obj.opossum.glutamatergic, "glutamatergic", "ambiguous")
cells.glutamatergic <- WhichCells(obj.opossum, ident = c(1, 2, 3, 4, 5, 8, 9, 10, 11, 12, 14, 15, 16, 17, 18, 23, 25))
obj.opossum$class <- ifelse(colnames(obj.opossum) %in% cells.glutamatergic, "glutamatergic", "ambiguous")
cells.gabaergic <- WhichCells(obj.opossum, ident = c(7, 13, 19, 20, 27, 29, 30))
obj.opossum$class[cells.gabaergic] <- "gabaergic"
cells.nonneuronal <- WhichCells(obj.opossum, ident = c(6, 21, 22, 24, 26, 28, 31))
obj.opossum$class[cells.nonneuronal] <- "nonneuronal"
DimPlot(obj.opossum, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-19, 19) + ylim(-19, 19) + coord_equal()
DimPlot(obj.opossum, reduction = "umap", group.by = "class", raster = FALSE) + xlim(-19, 19) + ylim(-19, 19) + coord_equal()
obj.opossum.glutamatergic <- subset(obj.opossum, subset = class == "glutamatergic")
obj.opossum.gabaergic <- subset(obj.opossum, subset = class == "gabaergic")
obj.opossum.nonneuronal <- subset(obj.opossum, subset = class == "nonneuronal")
obj.opossum.glutamatergic <- NormalizeData(obj.opossum.glutamatergic, normalization.method = "LogNormalize", scale.factor = 10000)
obj.opossum.glutamatergic <- FindVariableFeatures(obj.opossum.glutamatergic, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.opossum.glutamatergic)
obj.opossum.glutamatergic <- ScaleData(obj.opossum.glutamatergic, features = all.genes)
obj.opossum.glutamatergic <- RunPCA(obj.opossum, features = VariableFeatures(object = obj.opossum.glutamatergic))
obj.opossum.glutamatergic <- FindNeighbors(obj.opossum.glutamatergic, dims = 1:30)
obj.opossum.glutamatergic <- FindClusters(obj.opossum.glutamatergic, resolution = 1, algorithm = 4, method = "igraph")
obj.opossum.glutamatergic <- RunUMAP(obj.opossum.glutamatergic, dims = 1:30, method="umap-learn")
obj.opossum.gabaergic <- NormalizeData(obj.opossum.gabaergic, normalization.method = "LogNormalize", scale.factor = 10000)
obj.opossum.gabaergic <- FindVariableFeatures(obj.opossum.gabaergic, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.opossum.gabaergic)
obj.opossum.gabaergic <- ScaleData(obj.opossum.gabaergic, features = all.genes)
obj.opossum.gabaergic <- RunPCA(obj.opossum.gabaergic, features = VariableFeatures(object = obj.opossum.gabaergic))
obj.opossum.gabaergic <- FindNeighbors(obj.opossum.gabaergic, dims = 1:30)
obj.opossum.gabaergic <- FindClusters(obj.opossum.gabaergic, resolution = 1.1, algorithm = 4, method = "igraph")
obj.opossum.gabaergic <- RunUMAP(obj.opossum.gabaergic, dims = 1:30, method="umap-learn")
obj.opossum.nonneuronal <- NormalizeData(obj.opossum.nonneuronal, normalization.method = "LogNormalize", scale.factor = 10000)
obj.opossum.nonneuronal <- FindVariableFeatures(obj.opossum.nonneuronal, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.opossum.nonneuronal)
obj.opossum.nonneuronal <- ScaleData(obj.opossum.nonneuronal, features = all.genes)
obj.opossum.nonneuronal <- RunPCA(obj.opossum.nonneuronal, features = VariableFeatures(object = obj.opossum.nonneuronal))
obj.opossum.nonneuronal <- FindNeighbors(obj.opossum.nonneuronal, dims = 1:30)
obj.opossum.nonneuronal <- FindClusters(obj.opossum.nonneuronal, resolution = 1, algorithm = 4, method = "igraph")
obj.opossum.nonneuronal <- RunUMAP(obj.opossum.nonneuronal, dims = 1:30, method="umap-learn")
SaveH5Seurat(obj.opossum.glutamatergic, "E:/opossum_M1/seurat/opossum_m1_glutamatergic_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
SaveH5Seurat(obj.opossum.gabaergic, "E:/opossum_M1/seurat/opossum_m1_gabaergic_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
SaveH5Seurat(obj.opossum.nonneuronal, "E:/opossum_M1/seurat/opossum_m1_nonneuronal_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
library(Seurat)
library(reticulate)
library(scrubletR)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
library(data.table)
data_path <- "E:/Tree_Shrew_M1/output/"
sample_IDs <- c("NW_TX0100-2", "NW_TX0138-5", "NW_TX0138-6", "NW_TX0142-2",
"NW_TX0142-3", "NW_TX0144-4", "NW_TX0168-8", "NW_TX0168-9",
"NW_TX0169-1", "NW_TX0169-3", "NW_TX0169-4", "NW_TX0172-8")
objs <- c()
for (sample in sample_IDs) {
temp.obj.path <- paste(data_path, sample, "/outs/filtered_feature_bc_matrix/", sep = "")
temp.obj.data <- Read10X(temp.obj.path)
temp.obj <- CreateSeuratObject(counts = temp.obj.data, project = "Tree_Shrew_M1")
temp.obj$sample <- sample
temp.obj <- scrublet_R(seurat_obj = temp.obj)
objs <- append(objs, temp.obj)
}
obj.treeshrew <- merge(objs[[1]], y = objs[2:8], add.cell.ids = sample_IDs, project = "Tree_Shrew_M1")
obj.treeshrew <- merge(objs[[1]], y = objs[2:12], add.cell.ids = sample_IDs, project = "Tree_Shrew_M1")
genes.mapping <- read.csv("E:/_genomes/Tree_Shrew_Mouse_Genes.txt")
genes.mapping.mouse <- as.list(genes.mapping$Mouse.gene.name)
genes.mapping.treeshrew <- as.list(genes.mapping$Gene.name)
ids.mapping.treeshrew <- as.list(genes.mapping$Gene.stable.ID)
genes.treeshrew = rownames(obj.treeshrew)
for (gene in genes.mapping.mouse) {
idx.mouse <- which(genes.mapping.mouse %in% gene)
if (length(idx.mouse) == 1) {
gene.treeshrew <- genes.mapping.treeshrew[idx.mouse]
id.treeshrew <- ids.mapping.treeshrew[idx.mouse]
if (gene.treeshrew == "") {
idx.treeshrew <- which(genes.treeshrew %in% id.treeshrew)
genes.treeshrew[idx.treeshrew] <- gene
} else {
idx.treeshrew <- which(genes.treeshrew %in% gene.treeshrew)
genes.treeshrew[idx.treeshrew] <- gene
}
}
}
rm(list = c("temp.obj.data", "temp.obj", "objs"))
obj.df <- as.data.frame(as.matrix(obj.treeshrew[["RNA"]]@counts))
obj.treeshrew
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Human_M1/Human_M1_10xV3_Matrix.RDS")
meta_tb <- arrow::read_feather("E:/Human_M1/Human_M1_10xV3_Metadata.feather")
meta_df <- as.data.frame(meta_tb)
row.names(meta_df) <- meta_df[, "sample_id"]
obj.human <- CreateSeuratObject(counts = matrix, meta.data = meta_df)
rm(list = c("matrix", "meta_df", "meta_tb"))
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Mouse_M1/Mouse_M1_10xV3_Matrix.RDS")
meta_tb <- arrow::read_feather("E:/Mouse_M1/Mouse_M1_10xV3_Metadata.feather")
meta_df <- as.data.frame(meta_tb)
row.names(meta_df) <- meta_df[, "sample_id"]
obj.mouse <- CreateSeuratObject(counts = matrix, meta.data = meta_df)
rm(list = c("matrix", "meta_df", "meta_tb"))
obj.human <- AddMetaData(obj.human, metadata = unlist(rep(list("Human_M1"), ncol(obj.human))), col.name = "dataset")
Idents(object = obj.human) <- obj.human[["dataset"]]
obj.human[["percent.mt"]] <- PercentageFeatureSet(obj.human, pattern = "^mt-")
VlnPlot(obj.human, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Mouse_M1/Mouse_M1_10xV3_Matrix.RDS")
meta_tb <- arrow::read_feather("E:/Mouse_M1/Mouse_M1_10xV3_Metadata.feather")
meta_df <- as.data.frame(meta_tb)
row.names(meta_df) <- meta_df[, "sample_id"]
obj.mouse <- CreateSeuratObject(counts = matrix, meta.data = meta_df)
rm(list = c("matrix", "meta_df", "meta_tb"))
obj.mouse <- AddMetaData(obj.mouse, metadata = unlist(rep(list("Mouse_M1"), ncol(obj.mouse))), col.name = "dataset")
Idents(object = obj.mouse) <- obj.mouse[["dataset"]]
obj.mouse[["percent.mt"]] <- PercentageFeatureSet(obj.mouse, pattern = "^mt-")
VlnPlot(obj.mouse, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(obj.mouse, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(obj.mouse, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
obj.mouse <- NormalizeData(obj.mouse, normalization.method = "LogNormalize", scale.factor = 10000)
obj.mouse <- FindVariableFeatures(obj.mouse, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.mouse)
obj.mouse <- ScaleData(obj.mouse, features = all.genes)
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Mouse_M1/Mouse_M1_10xV3_Matrix.RDS")
meta_tb <- arrow::read_feather("E:/Mouse_M1/Mouse_M1_10xV3_Metadata.feather")
meta_df <- as.data.frame(meta_tb)
row.names(meta_df) <- meta_df[, "sample_id"]
obj.mouse <- CreateSeuratObject(counts = matrix, meta.data = meta_df)
rm(list = c("matrix", "meta_df", "meta_tb"))
obj.mouse <- AddMetaData(obj.mouse, metadata = unlist(rep(list("Mouse_M1"), ncol(obj.mouse))), col.name = "dataset")
Idents(object = obj.mouse) <- obj.mouse[["dataset"]]
obj.mouse[["percent.mt"]] <- PercentageFeatureSet(obj.mouse, pattern = "^mt-")
VlnPlot(obj.mouse, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(obj.mouse, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(obj.mouse, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
obj.mouse <- NormalizeData(obj.mouse, normalization.method = "LogNormalize", scale.factor = 10000)
obj.mouse <- FindVariableFeatures(obj.mouse, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.mouse)
obj.mouse <- ScaleData(obj.mouse, features = all.genes)
obj.mouse <- NormalizeData(obj.mouse, normalization.method = "LogNormalize", scale.factor = 10000)
obj.mouse <- FindVariableFeatures(obj.mouse, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.mouse)
obj.mouse <- ScaleData(obj.mouse, features = all.genes)
obj.mouse <- RunPCA(obj.mouse, features = VariableFeatures(object = obj.mouse))
ElbowPlot(obj.mouse, ndims = 50)
obj.mouse <- FindNeighbors(obj.mouse, dims = 1:30)
obj.mouse <- FindClusters(obj.mouse, resolution = 1, algorithm = 4, method = "igraph")
obj.mouse <- RunUMAP(obj.mouse, dims = 1:30, method="umap-learn")
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "sample", raster = FALSE) + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.mouse.glutamatergic, reduction = "umap", group.by = "donor_id", raster = FALSE) + xlim(-17, 13) + ylim(-18, 12) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "donor_id", raster = FALSE) + xlim(-17, 13) + ylim(-18, 12) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "subclass", label = TRUE, label.size = 4, raster = FALSE) + NoLegend()  + xlim(-17, 13) + ylim(-18, 12) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "donor_id", raster = FALSE) + xlim(-17, 13) + ylim(-18, 12) + coord_equal()
FeaturePlot(obj.opossum, reduction = "umap", features = c("Snap25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
FeaturePlot(obj.mouse, reduction = "umap", features = c("Snap25"), raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-15, 15) + ylim(-15, 15) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "donor_id", raster = FALSE) + xlim(-17, 13) + ylim(-18, 12) + coord_equal()
Idents(obj.mouse) <- "level1_label"
cells.glutamatergic <- WhichCells(obj.mouse, ident = "Glutamatergic")
obj.mouse$class <- ifelse(colnames(obj.mouse) %in% cells.glutamatergic, "glutamatergic", "ambiguous")
cells.gabaergic <- WhichCells(obj.mouse, ident = "GABAergic")
obj.mouse$class[cells.gabaergic] <- "gabaergic"
cells.nonneuronal <- WhichCells(obj.mouse, ident = "Non-neuronal")
obj.mouse$class[cells.nonneuronal] <- "nonneuronal"
DimPlot(obj.mouse, reduction = "umap", label = TRUE, raster = FALSE) + NoLegend() + xlim(-19, 19) + ylim(-19, 19) + coord_equal()
DimPlot(obj.mouse, reduction = "umap", group.by = "class", raster = FALSE) + xlim(-19, 19) + ylim(-19, 19) + coord_equal()
obj.mouse.glutamatergic <- subset(obj.mouse, subset = class == "glutamatergic")
obj.mouse.gabaergic <- subset(obj.mouse, subset = class == "gabaergic")
obj.mouse.nonneuronal <- subset(obj.mouse, subset = class == "nonneuronal")
obj.mouse.glutamatergic <- NormalizeData(obj.mouse.glutamatergic, normalization.method = "LogNormalize", scale.factor = 10000)
obj.mouse.glutamatergic <- FindVariableFeatures(obj.mouse.glutamatergic, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.mouse.glutamatergic)
obj.mouse.glutamatergic <- ScaleData(obj.mouse.glutamatergic, features = all.genes)
obj.mouse.glutamatergic <- RunPCA(obj.mouse, features = VariableFeatures(object = obj.mouse.glutamatergic))
obj.mouse.glutamatergic <- FindNeighbors(obj.mouse.glutamatergic, dims = 1:30)
obj.mouse.glutamatergic <- FindClusters(obj.mouse.glutamatergic, resolution = 1, algorithm = 4, method = "igraph")
obj.mouse.glutamatergic <- RunUMAP(obj.mouse.glutamatergic, dims = 1:30, method="umap-learn")
obj.mouse.gabaergic <- NormalizeData(obj.mouse.gabaergic, normalization.method = "LogNormalize", scale.factor = 10000)
obj.mouse.gabaergic <- FindVariableFeatures(obj.mouse.gabaergic, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.mouse.gabaergic)
obj.mouse.gabaergic <- ScaleData(obj.mouse.gabaergic, features = all.genes)
obj.mouse.gabaergic <- RunPCA(obj.mouse.gabaergic, features = VariableFeatures(object = obj.mouse.gabaergic))
obj.mouse.gabaergic <- FindNeighbors(obj.mouse.gabaergic, dims = 1:30)
obj.mouse.gabaergic <- FindClusters(obj.mouse.gabaergic, resolution = 1.1, algorithm = 4, method = "igraph")
obj.mouse.gabaergic <- RunUMAP(obj.mouse.gabaergic, dims = 1:30, method="umap-learn")
obj.mouse.nonneuronal <- NormalizeData(obj.mouse.nonneuronal, normalization.method = "LogNormalize", scale.factor = 10000)
obj.mouse.nonneuronal <- FindVariableFeatures(obj.mouse.nonneuronal, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.mouse.nonneuronal)
obj.mouse.nonneuronal <- ScaleData(obj.mouse.nonneuronal, features = all.genes)
obj.mouse.nonneuronal <- RunPCA(obj.mouse.nonneuronal, features = VariableFeatures(object = obj.mouse.nonneuronal))
obj.mouse.nonneuronal <- FindNeighbors(obj.mouse.nonneuronal, dims = 1:30)
obj.mouse.nonneuronal <- FindClusters(obj.mouse.nonneuronal, resolution = 1, algorithm = 4, method = "igraph")
obj.mouse.nonneuronal <- RunUMAP(obj.mouse.nonneuronal, dims = 1:30, method="umap-learn")
SaveH5Seurat(obj.mouse.glutamatergic, "E:/Mouse_M1/seurat/mouse_m1_glutamatergic_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
SaveH5Seurat(obj.mouse.gabaergic, "E:/Mouse_M1/seurat/mouse_m1_gabaergic_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
SaveH5Seurat(obj.mouse.nonneuronal, "E:/Mouse_M1/seurat/mouse_m1_nonneuronal_raw.h5seurat", overwrite = TRUE, verbose = TRUE)
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Mouse_M1/Mouse_M1_10xV3_Matrix.RDS")
meta_tb <- arrow::read_feather("E:/Mouse_M1/Mouse_M1_10xV3_Metadata.feather")
meta_df <- as.data.frame(meta_tb)
row.names(meta_df) <- meta_df[, "sample_id"]
obj.mouse <- CreateSeuratObject(counts = matrix, meta.data = meta_df)
rm(list = c("matrix", "meta_df", "meta_tb"))
library(Seurat)
library(reticulate)
library(arrow)
library(ggplot2)
library(dplyr)
library(SeuratDisk)
matrix <- readRDS("E:/Human_M1/Human_M1_10xV3_Matrix.RDS")
meta_tb <- arrow::read_feather("E:/Human_M1/Human_M1_10xV3_Metadata.feather")
meta_df <- as.data.frame(meta_tb)
row.names(meta_df) <- meta_df[, "sample_id"]
obj.human <- CreateSeuratObject(counts = matrix, meta.data = meta_df)
rm(list = c("matrix", "meta_df", "meta_tb"))
obj.human <- AddMetaData(obj.human, metadata = unlist(rep(list("Human_M1"), ncol(obj.human))), col.name = "dataset")
Idents(object = obj.human) <- obj.human[["dataset"]]
obj.human[["percent.mt"]] <- PercentageFeatureSet(obj.human, pattern = "^mt-")
VlnPlot(obj.human, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
obj.human <- AddMetaData(obj.human, metadata = unlist(rep(list("Human_M1"), ncol(obj.human))), col.name = "dataset")
Idents(object = obj.human) <- obj.human[["dataset"]]
obj.human[["percent.mt"]] <- PercentageFeatureSet(obj.human, pattern = "^mt-")
VlnPlot(obj.human, features = c("nFeature_RNA", "nCount_RNA", "percent.mt"), ncol = 3)
plot1 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "percent.mt")
plot2 <- FeatureScatter(obj.human, feature1 = "nCount_RNA", feature2 = "nFeature_RNA")
plot1 + plot2
obj.human <- NormalizeData(obj.human, normalization.method = "LogNormalize", scale.factor = 10000)
obj.human <- FindVariableFeatures(obj.human, selection.method = "vst", nfeatures = 3000)
all.genes <- rownames(obj.human)
obj.human <- ScaleData(obj.human, features = all.genes)
